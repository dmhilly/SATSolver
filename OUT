scala -cp classes DPLL tests/integration/sat/aim-50-1_6-yes1-1.cnf
NOT TRIMMING UNIQUE VARS!!! CHANGE THIS!!!
Vars:List(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Clauses: x4 x27 x40 AND x4 not(x27) x40 AND x9 x29 not(x40) AND x4 not(x9) not(x40) AND not(x4) x24 x29 AND not(x4) not(x24) x29 AND x10 not(x29) not(x32) AND not(x10) not(x29) not(x32) AND x6 not(x29) x32 AND not(x6) x13 x32 AND not(x3) not(x6) not(x13) AND x3 not(x13) not(x28) AND not(x0) not(x13) x31 AND not(x0) x3 not(x31) AND x0 x23 x28 AND x0 not(x23) not(x33) AND not(x5) not(x23) x33 AND x5 not(x23) x37 AND x5 not(x31) not(x37) AND x31 x43 x47 AND not(x37) not(x43) x47 AND x21 x28 not(x47) AND x21 not(x28) x31 AND not(x21) not(x24) not(x47) AND not(x21) x24 x39 AND x17 not(x21) not(x39) AND not(x17) x19 not(x39) AND not(x17) x27 not(x39) AND not(x17) not(x27) x38 AND not(x27) x34 not(x38) AND not(x34) not(x38) x42 AND not(x34) not(x42) not(x49) AND not(x42) not(x44) x49 AND x30 x44 x49 AND not(x30) not(x43) x44 AND not(x14) x43 x48 AND not(x14) not(x30) not(x48) AND x14 not(x30) x35 AND x14 x22 not(x35) AND not(x22) not(x35) x45 AND x19 x26 not(x45) AND not(x19) not(x22) x26 AND not(x15) not(x26) not(x45) AND x15 x25 not(x26) AND x15 x16 not(x25) AND x1 x12 not(x16) AND x1 not(x12) not(x25) AND not(x4) not(x16) not(x25) AND not(x1) not(x16) x41 AND not(x1) x11 not(x12) AND not(x1) not(x11) not(x41) AND x7 x12 not(x41) AND not(x7) not(x9) x12 AND x2 not(x7) x9 AND not(x2) x9 not(x36) AND not(x2) x9 not(x46) AND x9 x18 x46 AND not(x11) not(x18) x46 AND x11 not(x18) x20 AND x8 not(x18) not(x20) AND not(x8) not(x10) not(x20) AND not(x8) x10 not(x48) AND x10 x40 x48 AND x18 not(x31) x36 AND not(x0) x38 not(x49) AND x7 x16 x39 AND x37 x42 x48 AND x22 x41 not(x46) AND not(x12) not(x28) x36 AND not(x33) x36 not(x46) AND not(x32) not(x36) x49 AND not(x5) x13 x33 AND x8 not(x19) not(x49) AND x34 x35 x37 AND x2 x30 x45 AND x6 not(x15) x20 AND not(x5) x16 x25 AND x22 x23 x45 AND x17 x23 not(x44) AND not(x3) not(x5) x6 
Trying: (0,true)
Propogating:List(1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true))
Trying: (1,true)
Propogating:List(1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true))
Trying: (2,true)
Propogating:List(1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true))
Trying: (3,true)
Propogating:List(1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true))
Trying: (4,true)
Propogating:List(1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true))
Trying: (5,true)
Propogating:List(1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x3) not(x5) x6 ; Literal: x6 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x13) 
Found unit clause:not(x6) x13 x32 ; Literal: x32 
Found unit clause:not(x5) x13 x33 ; Literal: x33 
Done Propogating:List(1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true))
Trying: (7,true)
Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(7,true) (5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true))
Trying: (8,true)
Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(8,true) (7,true) (5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true), (8,true))
Trying: (9,true)
Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:not(x5) x16 x25 ; Literal: x25 
Found unit clause:x15 x16 not(x25) ; Literal: x15 
Done Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 0, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(9,true) (8,true) (7,true) (5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (16,false) (15,true) (32,true) (41,false) (33,true) (12,true) (3,true) (1,true) (7,true) (25,true) (11,true) (13,false) (9,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (5,true)->(33,true) (13,false)->(33,true) (7,true)->(12,true) (1,true)->(16,false) (9,true)->(12,true) (25,true)->(15,true) (16,false)->(25,true) (16,false)->(15,true) (13,false)->(32,true) (5,true)->(25,true) (1,true)->(11,true) (3,true)->(6,true) (41,false)->(16,false) (3,true)->(13,false) (11,true)->(41,false) (12,true)->(11,true) (6,true)->(13,false) (1,true)->(41,false) }
VarVals=List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 0, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true), (8,true), (9,true))
Trying: (10,true)
Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x29) 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x20) 
Found unit clause:not(x4) x24 x29 ; Literal: x24 
Found unit clause:not(x4) not(x24) x29 ; Literal: not(x24) 
Bad clause:not(x4) x24 x29 
Done Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, 1, 0, -1, -1, -1, 0, -1, -1, -1, 0, 1, -1, -1, -1, 0, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (4,true) (5,true) (6,true) (16,false) (15,true) (32,true) (24,false) (41,false) (33,true) (12,true) (3,true) (1,true) (29,false) (20,false) (24,true) (7,true) (25,true) (10,true) (11,true) (13,false) (8,true) (9,true) } Edges: { (32,true)->(29,false) (5,true)->(6,true) (13,false)->(33,true) (25,true)->(15,true) (4,true)->(24,true) (16,false)->(25,true) (10,true)->(29,false) (1,true)->(11,true) (3,true)->(13,false) (29,false)->(24,false) (12,true)->(11,true) (1,true)->(41,false) (6,true)->(32,true) (10,true)->(20,false) (5,true)->(33,true) (29,false)->(24,true) (7,true)->(12,true) (1,true)->(16,false) (9,true)->(12,true) (16,false)->(15,true) (13,false)->(32,true) (5,true)->(25,true) (41,false)->(16,false) (3,true)->(6,true) (11,true)->(41,false) (8,true)->(20,false) (4,true)->(24,false) (6,true)->(13,false) }
Found resolution clause: not(x4) x29 
Added clause: not(x4) x29 
DEDUCING
Stack=(9,true) (8,true) (7,true) (5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (16,false) (15,true) (32,true) (41,false) (33,true) (12,true) (3,true) (1,true) (7,true) (25,true) (11,true) (13,false) (9,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (5,true)->(33,true) (13,false)->(33,true) (7,true)->(12,true) (1,true)->(16,false) (9,true)->(12,true) (25,true)->(15,true) (16,false)->(25,true) (16,false)->(15,true) (13,false)->(32,true) (5,true)->(25,true) (1,true)->(11,true) (3,true)->(6,true) (41,false)->(16,false) (3,true)->(13,false) (11,true)->(41,false) (12,true)->(11,true) (6,true)->(13,false) (1,true)->(41,false) }
VarVals=List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 0, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true), (8,true), (9,true))
Trying: (10,false)
Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x10 not(x29) not(x32) ; Literal: not(x29) 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Found unit clause:not(x4) x29 ; Literal: x29 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x10 x40 x48 ; Literal: x40 
Bad clause:x10 not(x29) not(x32) 
Done Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, 0, -1)
Running conflict analysis on implication graph: Nodes: { (4,true) (5,true) (6,true) (16,false) (48,false) (15,true) (32,true) (41,false) (33,true) (12,true) (40,true) (3,true) (1,true) (29,false) (7,true) (10,false) (25,true) (11,true) (13,false) (8,true) (29,true) (9,true) } Edges: { (32,true)->(29,false) (6,true)->(32,true) (5,true)->(6,true) (5,true)->(33,true) (13,false)->(33,true) (7,true)->(12,true) (1,true)->(16,false) (48,false)->(40,true) (9,true)->(12,true) (25,true)->(15,true) (8,true)->(48,false) (16,false)->(25,true) (10,false)->(48,false) (16,false)->(15,true) (10,false)->(40,true) (13,false)->(32,true) (5,true)->(25,true) (1,true)->(11,true) (3,true)->(6,true) (41,false)->(16,false) (10,false)->(29,false) (3,true)->(13,false) (11,true)->(41,false) (4,true)->(29,true) (12,true)->(11,true) (6,true)->(13,false) (1,true)->(41,false) }
Found resolution clause: not(x4) not(x32) x10 
Added clause: not(x4) not(x32) x10 
Running conflict analysis on implication graph: Nodes: { (4,true) (5,true) (6,true) (16,false) (48,false) (15,true) (32,true) (41,false) (33,true) (12,true) (40,true) (3,true) (1,true) (29,false) (7,true) (10,false) (25,true) (11,true) (13,false) (8,true) (29,true) (9,true) } Edges: { (32,true)->(29,false) (6,true)->(32,true) (5,true)->(6,true) (5,true)->(33,true) (13,false)->(33,true) (7,true)->(12,true) (1,true)->(16,false) (48,false)->(40,true) (9,true)->(12,true) (25,true)->(15,true) (8,true)->(48,false) (16,false)->(25,true) (10,false)->(48,false) (16,false)->(15,true) (10,false)->(40,true) (13,false)->(32,true) (5,true)->(25,true) (1,true)->(11,true) (3,true)->(6,true) (41,false)->(16,false) (10,false)->(29,false) (3,true)->(13,false) (11,true)->(41,false) (4,true)->(29,true) (12,true)->(11,true) (6,true)->(13,false) (1,true)->(41,false) }
Found resolution clause: not(x4) not(x32) x10 
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true), (8,true), (9,false))
DEDUCING
Stack=(8,true) (7,true) (5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true), (8,true))
DEDUCING
Stack=(8,true) (7,true) (5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true), (8,true))
Trying: (9,false)
Propogating:List(1, 1, 1, 1, 1, 1, -1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:not(x3) not(x5) x6 ; Literal: x6 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x13) 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:not(x6) x13 x32 ; Literal: x32 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Found unit clause:not(x5) x13 x33 ; Literal: x33 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Found unit clause:not(x4) not(x32) x10 ; Literal: x10 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Bad clause:not(x4) not(x32) x10 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x10 x40 x48 ; Literal: x40 
Bad clause:not(x4) not(x32) x10 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x4) not(x32) x10 
Done Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, 0, -1, 0, -1)
Running conflict analysis on implication graph: Nodes: { (9,false) (4,true) (36,false) (5,true) (6,true) (48,false) (32,true) (33,true) (12,false) (40,true) (3,true) (1,true) (46,false) (2,true) (18,true) (10,false) (20,true) (11,false) (10,true) (13,false) (29,true) (8,true) } Edges: { (5,true)->(6,true) (29,true)->(10,true) (13,false)->(33,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (29,true)->(10,false) (11,false)->(12,false) (4,true)->(10,true) (3,true)->(13,false) (9,false)->(36,false) (6,true)->(32,true) (5,true)->(33,true) (46,false)->(18,true) (48,false)->(40,true) (32,true)->(10,true) (10,false)->(48,false) (46,false)->(11,false) (10,false)->(40,true) (13,false)->(32,true) (1,true)->(12,false) (3,true)->(6,true) (32,true)->(10,false) (4,true)->(29,true) (9,false)->(46,false) (18,true)->(11,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: not(x29) not(x4) not(x32) 
Added clause: not(x29) not(x4) not(x32) 
Running conflict analysis on implication graph: Nodes: { (9,false) (4,true) (36,false) (5,true) (6,true) (48,false) (32,true) (33,true) (12,false) (40,true) (3,true) (1,true) (46,false) (2,true) (18,true) (10,false) (20,true) (11,false) (10,true) (13,false) (29,true) (8,true) } Edges: { (5,true)->(6,true) (29,true)->(10,true) (13,false)->(33,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (29,true)->(10,false) (11,false)->(12,false) (4,true)->(10,true) (3,true)->(13,false) (9,false)->(36,false) (6,true)->(32,true) (5,true)->(33,true) (46,false)->(18,true) (48,false)->(40,true) (32,true)->(10,true) (10,false)->(48,false) (46,false)->(11,false) (10,false)->(40,true) (13,false)->(32,true) (1,true)->(12,false) (3,true)->(6,true) (32,true)->(10,false) (4,true)->(29,true) (9,false)->(46,false) (18,true)->(11,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: not(x29) not(x4) not(x32) 
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true), (8,false))
DEDUCING
Stack=(7,true) (5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true))
DEDUCING
Stack=(7,true) (5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,true))
Trying: (8,false)
Propogating:List(1, 1, 1, 1, 1, 1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x3) not(x5) x6 ; Literal: x6 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x13) 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Bad clause:not(x6) x13 x32 
Found unit clause:not(x5) x13 x33 ; Literal: x33 
Bad clause:not(x6) x13 x32 
Done Propogating:List(1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (4,true) (5,true) (6,true) (32,true) (32,false) (33,true) (13,false) (29,true) (3,true) } Edges: { (4,true)->(32,false) (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (4,true)->(29,true) (29,true)->(32,false) (6,true)->(13,false) }
Found resolution clause: not(x6) x13 not(x4) not(x29) 
Added clause: not(x6) x13 not(x4) not(x29) 
Running conflict analysis on implication graph: Nodes: { (4,true) (5,true) (6,true) (32,true) (32,false) (33,true) (13,false) (29,true) (3,true) } Edges: { (4,true)->(32,false) (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (4,true)->(29,true) (29,true)->(32,false) (6,true)->(13,false) }
Found resolution clause: not(x6) x13 not(x4) not(x29) 
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true), (7,false))
DEDUCING
Stack=(5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true))
DEDUCING
Stack=(5,true) (4,true) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,true), (5,true))
Trying: (7,false)
Propogating:List(1, 1, 1, 1, 1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x3) not(x5) x6 ; Literal: x6 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x13) 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x6) x13 not(x4) not(x29) ; Literal: x13 
Bad clause:not(x3) not(x6) not(x13) 
Found unit clause:not(x0) not(x13) x31 ; Literal: x31 
Bad clause:not(x3) not(x6) not(x13) 
Done Propogating:List(1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (4,true) (0,true) (5,true) (31,true) (6,true) (32,true) (32,false) (13,true) (33,true) (13,false) (29,true) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (5,true)->(33,true) (4,true)->(13,true) (0,true)->(31,true) (13,false)->(33,true) (6,true)->(13,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (13,false)->(32,true) (3,true)->(6,true) (3,true)->(13,false) (4,true)->(29,true) (13,true)->(31,true) (6,true)->(13,false) }
Found resolution clause: not(x3) not(x29) not(x4) x13 not(x6) 
Added clause: not(x3) not(x29) not(x4) x13 not(x6) 
Running conflict analysis on implication graph: Nodes: { (4,true) (0,true) (5,true) (31,true) (6,true) (32,true) (32,false) (13,true) (33,true) (13,false) (29,true) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (5,true)->(33,true) (4,true)->(13,true) (0,true)->(31,true) (13,false)->(33,true) (6,true)->(13,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (13,false)->(32,true) (3,true)->(6,true) (3,true)->(13,false) (4,true)->(29,true) (13,true)->(31,true) (6,true)->(13,false) }
Found resolution clause: not(x3) not(x29) not(x4) x13 not(x6) 
Backjumping
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,true), (4,false))
DEDUCING
Stack=(3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true))
DEDUCING
Stack=(3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true))
Trying: (4,false)
Propogating:List(1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false))
Trying: (5,true)
Propogating:List(1, 1, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x3) not(x5) x6 ; Literal: x6 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x13) 
Found unit clause:not(x6) x13 x32 ; Literal: x32 
Found unit clause:not(x5) x13 x33 ; Literal: x33 
Done Propogating:List(1, 1, 1, 1, 0, 1, 1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(5,true) (4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 0, 1, 1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true))
Trying: (7,true)
Propogating:List(1, 1, 1, 1, 0, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 1, 1, 0, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(7,true) (5,true) (4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 0, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true), (7,true))
Trying: (8,true)
Propogating:List(1, 1, 1, 1, 0, 1, 1, 1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 1, 1, 0, 1, 1, 1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(8,true) (7,true) (5,true) (4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 0, 1, 1, 1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true), (7,true), (8,true))
Trying: (9,true)
Propogating:List(1, 1, 1, 1, 0, 1, 1, 1, 1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x40) 
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:x4 x27 x40 ; Literal: x27 
Found unit clause:x4 not(x27) x40 ; Literal: not(x27) 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Bad clause:x4 x27 x40 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Bad clause:x4 x27 x40 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Bad clause:x4 x27 x40 
Found unit clause:not(x5) x16 x25 ; Literal: x25 
Bad clause:x4 x27 x40 
Found unit clause:x15 x16 not(x25) ; Literal: x15 
Bad clause:x4 x27 x40 
Done Propogating:List(1, 1, 1, 1, 0, 1, 1, 1, 1, 1, -1, 1, 1, 0, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (5,true) (27,true) (6,true) (16,false) (4,false) (32,true) (15,true) (41,false) (33,true) (12,true) (3,true) (1,true) (7,true) (25,true) (11,true) (13,false) (9,true) (27,false) (40,false) } Edges: { (40,false)->(27,false) (6,true)->(32,true) (5,true)->(6,true) (5,true)->(33,true) (4,false)->(27,true) (13,false)->(33,true) (7,true)->(12,true) (4,false)->(40,false) (1,true)->(16,false) (9,true)->(12,true) (25,true)->(15,true) (16,false)->(25,true) (9,true)->(40,false) (16,false)->(15,true) (13,false)->(32,true) (5,true)->(25,true) (1,true)->(11,true) (3,true)->(6,true) (4,false)->(27,false) (41,false)->(16,false) (3,true)->(13,false) (40,false)->(27,true) (11,true)->(41,false) (12,true)->(11,true) (6,true)->(13,false) (1,true)->(41,false) }
Found resolution clause: x4 x40 
Added clause: x4 x40 
DEDUCING
Stack=(8,true) (7,true) (5,true) (4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 0, 1, 1, 1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true), (7,true), (8,true))
Trying: (9,false)
Propogating:List(1, 1, 1, 1, 0, 1, 1, 1, 1, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Bad clause:x10 not(x29) not(x32) 
Done Propogating:List(1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, 0, -1, 0, -1)
Running conflict analysis on implication graph: Nodes: { (9,false) (36,false) (5,true) (6,true) (48,false) (4,false) (32,true) (33,true) (12,false) (40,true) (3,true) (1,true) (46,false) (2,true) (18,true) (10,false) (20,true) (10,true) (11,false) (13,false) (29,true) (8,true) } Edges: { (5,true)->(6,true) (29,true)->(10,true) (13,false)->(33,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (29,true)->(10,false) (11,false)->(12,false) (3,true)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (4,false)->(40,true) (6,true)->(32,true) (5,true)->(33,true) (46,false)->(18,true) (9,false)->(29,true) (32,true)->(10,true) (10,false)->(48,false) (46,false)->(11,false) (13,false)->(32,true) (1,true)->(12,false) (3,true)->(6,true) (32,true)->(10,false) (9,false)->(46,false) (18,true)->(11,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: not(x29) not(x32) 
Added clause: not(x29) not(x32) 
Running conflict analysis on implication graph: Nodes: { (9,false) (36,false) (5,true) (6,true) (48,false) (4,false) (32,true) (33,true) (12,false) (40,true) (3,true) (1,true) (46,false) (2,true) (18,true) (10,false) (20,true) (10,true) (11,false) (13,false) (29,true) (8,true) } Edges: { (5,true)->(6,true) (29,true)->(10,true) (13,false)->(33,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (29,true)->(10,false) (11,false)->(12,false) (3,true)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (4,false)->(40,true) (6,true)->(32,true) (5,true)->(33,true) (46,false)->(18,true) (9,false)->(29,true) (32,true)->(10,true) (10,false)->(48,false) (46,false)->(11,false) (13,false)->(32,true) (1,true)->(12,false) (3,true)->(6,true) (32,true)->(10,false) (9,false)->(46,false) (18,true)->(11,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: not(x29) not(x32) 
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true), (7,true), (8,false))
DEDUCING
Stack=(7,true) (5,true) (4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 0, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true), (7,true))
DEDUCING
Stack=(7,true) (5,true) (4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 0, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true), (7,true))
Trying: (8,false)
Propogating:List(1, 1, 1, 1, 0, 1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x3) not(x5) x6 ; Literal: x6 
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x13) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:not(x6) x13 x32 ; Literal: x32 
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:not(x5) x13 x33 ; Literal: x33 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:x9 x18 x46 ; Literal: x18 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Found unit clause:x8 not(x18) not(x20) ; Literal: not(x20) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Bad clause:x11 not(x18) x20 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:x11 not(x18) x20 
Bad clause:not(x29) not(x32) 
Done Propogating:List(1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (9,false) (36,false) (5,true) (6,true) (4,false) (32,true) (33,true) (12,false) (40,true) (3,true) (1,true) (20,false) (46,false) (2,true) (10,false) (18,true) (10,true) (11,false) (8,false) (13,false) (29,true) } Edges: { (5,true)->(6,true) (29,true)->(10,true) (8,false)->(20,false) (13,false)->(33,true) (2,true)->(36,false) (9,false)->(18,true) (29,true)->(10,false) (4,false)->(9,false) (40,true)->(9,false) (11,false)->(12,false) (3,true)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (4,false)->(40,true) (6,true)->(32,true) (5,true)->(33,true) (46,false)->(18,true) (9,false)->(29,true) (32,true)->(10,true) (46,false)->(11,false) (13,false)->(32,true) (1,true)->(12,false) (3,true)->(6,true) (32,true)->(10,false) (9,false)->(46,false) (18,true)->(11,false) (18,true)->(20,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: not(x29) not(x32) 
Added clause: not(x29) not(x32) 
Running conflict analysis on implication graph: Nodes: { (9,false) (36,false) (5,true) (6,true) (4,false) (32,true) (33,true) (12,false) (40,true) (3,true) (1,true) (20,false) (46,false) (2,true) (10,false) (18,true) (10,true) (11,false) (8,false) (13,false) (29,true) } Edges: { (5,true)->(6,true) (29,true)->(10,true) (8,false)->(20,false) (13,false)->(33,true) (2,true)->(36,false) (9,false)->(18,true) (29,true)->(10,false) (4,false)->(9,false) (40,true)->(9,false) (11,false)->(12,false) (3,true)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (4,false)->(40,true) (6,true)->(32,true) (5,true)->(33,true) (46,false)->(18,true) (9,false)->(29,true) (32,true)->(10,true) (46,false)->(11,false) (13,false)->(32,true) (1,true)->(12,false) (3,true)->(6,true) (32,true)->(10,false) (9,false)->(46,false) (18,true)->(11,false) (18,true)->(20,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: not(x29) not(x32) 
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true), (7,false))
DEDUCING
Stack=(5,true) (4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true))
DEDUCING
Stack=(5,true) (4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { (5,true) (6,true) (32,true) (33,true) (13,false) (3,true) } Edges: { (6,true)->(32,true) (5,true)->(6,true) (13,false)->(32,true) (5,true)->(33,true) (3,true)->(6,true) (13,false)->(33,true) (3,true)->(13,false) (6,true)->(13,false) }
VarVals=List(1, 1, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false), (5,true))
Trying: (7,false)
Propogating:List(1, 1, 1, 1, 0, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x3) not(x5) x6 ; Literal: x6 
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x13) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:not(x6) x13 x32 ; Literal: x32 
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:not(x5) x13 x33 ; Literal: x33 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:x9 x18 x46 ; Literal: x18 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x7 x12 not(x41) ; Literal: not(x41) 
Found unit clause:x8 not(x18) not(x20) ; Literal: x8 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x7 x16 x39 ; Literal: x39 
Found unit clause:not(x5) x16 x25 ; Literal: x25 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x15 x16 not(x25) ; Literal: x15 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Done Propogating:List(1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, -1, 1, 0, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 0, -1, -1, 1, 1, 0, -1, -1, -1, -1, 0, -1, 0, -1)
Running conflict analysis on implication graph: Nodes: { (6,true) (32,true) (40,true) (10,false) (18,true) (10,true) (8,true) (29,true) (9,false) (36,false) (5,true) (48,false) (16,false) (4,false) (15,true) (41,false) (39,true) (33,true) (12,false) (3,true) (1,true) (46,false) (2,true) (25,true) (20,true) (11,false) (13,false) (7,false) } Edges: { (5,true)->(6,true) (29,true)->(10,true) (13,false)->(33,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (29,true)->(10,false) (25,true)->(15,true) (4,false)->(9,false) (16,false)->(25,true) (40,true)->(9,false) (12,false)->(41,false) (7,false)->(39,true) (11,false)->(12,false) (3,true)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (4,false)->(40,true) (6,true)->(32,true) (5,true)->(33,true) (46,false)->(18,true) (16,false)->(39,true) (9,false)->(29,true) (1,true)->(16,false) (32,true)->(10,true) (20,true)->(8,true) (10,false)->(48,false) (46,false)->(11,false) (16,false)->(15,true) (13,false)->(32,true) (1,true)->(12,false) (41,false)->(16,false) (3,true)->(6,true) (5,true)->(25,true) (32,true)->(10,false) (7,false)->(41,false) (9,false)->(46,false) (18,true)->(11,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: not(x29) not(x32) 
Added clause: not(x29) not(x32) 
Running conflict analysis on implication graph: Nodes: { (6,true) (32,true) (40,true) (10,false) (18,true) (10,true) (8,true) (29,true) (9,false) (36,false) (5,true) (48,false) (16,false) (4,false) (15,true) (41,false) (39,true) (33,true) (12,false) (3,true) (1,true) (46,false) (2,true) (25,true) (20,true) (11,false) (13,false) (7,false) } Edges: { (5,true)->(6,true) (29,true)->(10,true) (13,false)->(33,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (29,true)->(10,false) (25,true)->(15,true) (4,false)->(9,false) (16,false)->(25,true) (40,true)->(9,false) (12,false)->(41,false) (7,false)->(39,true) (11,false)->(12,false) (3,true)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (4,false)->(40,true) (6,true)->(32,true) (5,true)->(33,true) (46,false)->(18,true) (16,false)->(39,true) (9,false)->(29,true) (1,true)->(16,false) (32,true)->(10,true) (20,true)->(8,true) (10,false)->(48,false) (46,false)->(11,false) (16,false)->(15,true) (13,false)->(32,true) (1,true)->(12,false) (41,false)->(16,false) (3,true)->(6,true) (5,true)->(25,true) (32,true)->(10,false) (7,false)->(41,false) (9,false)->(46,false) (18,true)->(11,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: not(x29) not(x32) 
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,true), (4,false), (5,false))
DEDUCING
Stack=(4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false))
DEDUCING
Stack=(4,false) (3,true) (2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,true), (4,false))
Trying: (5,false)
Propogating:List(1, 1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Found unit clause:not(x6) x13 x32 ; Literal: x13 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x13) 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Bad clause:not(x6) x13 x32 
Found unit clause:x8 not(x18) not(x20) ; Literal: x8 
Bad clause:not(x6) x13 x32 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x10) 
Bad clause:not(x6) x13 x32 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Bad clause:not(x6) x13 x32 
Done Propogating:List(1, 1, 1, 1, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, 0, -1, 0, -1)
Running conflict analysis on implication graph: Nodes: { (9,false) (36,false) (6,true) (48,false) (4,false) (32,false) (13,true) (12,false) (40,true) (3,true) (1,true) (46,false) (2,true) (18,true) (10,false) (20,true) (11,false) (13,false) (29,true) (8,true) } Edges: { (32,false)->(13,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (4,false)->(9,false) (40,true)->(9,false) (11,false)->(12,false) (8,true)->(10,false) (3,true)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (4,false)->(40,true) (46,false)->(18,true) (32,false)->(6,true) (9,false)->(29,true) (6,true)->(13,true) (29,true)->(32,false) (20,true)->(8,true) (10,false)->(48,false) (20,true)->(10,false) (46,false)->(11,false) (1,true)->(12,false) (29,true)->(6,true) (9,false)->(46,false) (18,true)->(11,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: x32 not(x6) not(x3) 
Added clause: x32 not(x6) not(x3) 
Running conflict analysis on implication graph: Nodes: { (9,false) (36,false) (6,true) (48,false) (4,false) (32,false) (13,true) (12,false) (40,true) (3,true) (1,true) (46,false) (2,true) (18,true) (10,false) (20,true) (11,false) (13,false) (29,true) (8,true) } Edges: { (32,false)->(13,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (4,false)->(9,false) (40,true)->(9,false) (11,false)->(12,false) (8,true)->(10,false) (3,true)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (4,false)->(40,true) (46,false)->(18,true) (32,false)->(6,true) (9,false)->(29,true) (6,true)->(13,true) (29,true)->(32,false) (20,true)->(8,true) (10,false)->(48,false) (20,true)->(10,false) (46,false)->(11,false) (1,true)->(12,false) (29,true)->(6,true) (9,false)->(46,false) (18,true)->(11,false) (6,true)->(13,false) (2,true)->(46,false) }
Found resolution clause: x32 not(x6) not(x3) 
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,true), (4,true))
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,false))
DEDUCING
Stack=(2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true))
DEDUCING
Stack=(2,true) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true))
Trying: (3,false)
Propogating:List(1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x0) x3 not(x31) ; Literal: not(x31) 
Found unit clause:not(x0) not(x13) x31 ; Literal: not(x13) 
Done Propogating:List(1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,false) (2,true) (1,true) (0,true) 
Impl=Nodes: { (0,true) (3,false) (31,false) (13,false) } Edges: { (0,true)->(13,false) (31,false)->(13,false) (3,false)->(31,false) (0,true)->(31,false) }
VarVals=List(1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,false))
Trying: (4,true)
Propogating:List(1, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x6) x13 not(x4) not(x29) ; Literal: not(x6) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Bad clause:x6 not(x29) x32 
Done Propogating:List(1, 1, 1, 0, 1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (4,true) (0,true) (3,false) (32,false) (31,false) (13,false) (29,true) } Edges: { (4,true)->(32,false) (0,true)->(13,false) (29,true)->(6,false) (4,true)->(6,false) (13,false)->(6,false) (31,false)->(13,false) (4,true)->(29,true) (3,false)->(31,false) (0,true)->(31,false) (29,true)->(32,false) }
No conflict
DEDUCING
Stack=(3,false) (2,true) (1,true) (0,true) 
Impl=Nodes: { (0,true) (3,false) (31,false) (13,false) } Edges: { (0,true)->(13,false) (31,false)->(13,false) (3,false)->(31,false) (0,true)->(31,false) }
VarVals=List(1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,true), (3,false))
Trying: (4,false)
Propogating:List(1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:not(x6) x13 x32 ; Literal: not(x6) 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Bad clause:x6 not(x29) x32 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Bad clause:x6 not(x29) x32 
Found unit clause:x8 not(x18) not(x20) ; Literal: x8 
Bad clause:x6 not(x29) x32 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x10) 
Bad clause:x6 not(x29) x32 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Bad clause:x6 not(x29) x32 
Done Propogating:List(1, 1, 1, 0, 0, -1, 0, -1, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, 0, -1, 0, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (9,false) (0,true) (36,false) (6,true) (48,false) (4,false) (32,false) (31,false) (12,false) (40,true) (1,true) (46,false) (2,true) (18,true) (3,false) (10,false) (20,true) (11,false) (13,false) (29,true) (8,true) } Edges: { (0,true)->(13,false) (18,true)->(20,true) (11,false)->(20,true) (3,false)->(31,false) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (4,false)->(9,false) (40,true)->(9,false) (32,false)->(6,false) (13,false)->(6,false) (11,false)->(12,false) (31,false)->(13,false) (8,true)->(10,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (4,false)->(40,true) (46,false)->(18,true) (32,false)->(6,true) (9,false)->(29,true) (29,true)->(32,false) (20,true)->(8,true) (10,false)->(48,false) (20,true)->(10,false) (46,false)->(11,false) (1,true)->(12,false) (29,true)->(6,true) (9,false)->(46,false) (18,true)->(11,false) (0,true)->(31,false) (2,true)->(46,false) }
Found resolution clause: x32 not(x29) x13 
Added clause: x32 not(x29) x13 
Running conflict analysis on implication graph: Nodes: { (6,false) (9,false) (0,true) (36,false) (6,true) (48,false) (4,false) (32,false) (31,false) (12,false) (40,true) (1,true) (46,false) (2,true) (18,true) (3,false) (10,false) (20,true) (11,false) (13,false) (29,true) (8,true) } Edges: { (0,true)->(13,false) (18,true)->(20,true) (11,false)->(20,true) (3,false)->(31,false) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (4,false)->(9,false) (40,true)->(9,false) (32,false)->(6,false) (13,false)->(6,false) (11,false)->(12,false) (31,false)->(13,false) (8,true)->(10,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (4,false)->(40,true) (46,false)->(18,true) (32,false)->(6,true) (9,false)->(29,true) (29,true)->(32,false) (20,true)->(8,true) (10,false)->(48,false) (20,true)->(10,false) (46,false)->(11,false) (1,true)->(12,false) (29,true)->(6,true) (9,false)->(46,false) (18,true)->(11,false) (0,true)->(31,false) (2,true)->(46,false) }
Found resolution clause: x32 not(x29) x13 
Backjumping
PRUNING List((0,true), (1,true), (2,true), (3,true))
Backjumping
PRUNING List((0,true), (1,true), (2,false))
DEDUCING
Stack=(1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true))
DEDUCING
Stack=(1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true))
Trying: (2,false)
Propogating:List(1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(2,false) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,false))
Trying: (3,true)
Propogating:List(1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,true) (2,false) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,false), (3,true))
Trying: (4,true)
Propogating:List(1, 1, 0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:x32 not(x6) not(x3) ; Literal: not(x6) 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Bad clause:x6 not(x29) x32 
Found unit clause:not(x0) not(x13) x31 ; Literal: x31 
Found unit clause:not(x3) not(x5) x6 ; Literal: not(x5) 
Bad clause:x6 not(x29) x32 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x37) 
Bad clause:x6 not(x29) x32 
Found unit clause:x5 not(x23) x37 ; Literal: not(x23) 
Bad clause:x6 not(x29) x32 
Done Propogating:List(1, 1, 0, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 1, -1, 1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (4,true) (0,true) (31,true) (6,true) (5,false) (23,false) (32,false) (13,true) (29,true) (37,false) (3,true) } Edges: { (6,false)->(5,false) (32,false)->(13,true) (5,false)->(37,false) (0,true)->(31,true) (32,false)->(6,true) (29,true)->(32,false) (31,true)->(37,false) (29,true)->(13,true) (3,true)->(6,false) (4,true)->(32,false) (37,false)->(23,false) (5,false)->(23,false) (32,false)->(6,false) (29,true)->(6,true) (4,true)->(29,true) (13,true)->(31,true) (3,true)->(5,false) }
Found resolution clause: x32 not(x29) not(x3) 
Added clause: x32 not(x29) not(x3) 
DEDUCING
Stack=(3,true) (2,false) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,false), (3,true))
Trying: (4,false)
Propogating:List(1, 1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:x2 not(x7) x9 ; Literal: not(x7) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) not(x3) ; Literal: x32 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Done Propogating:List(1, 1, 0, 1, 0, -1, -1, 0, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (9,false) (10,false) (2,false) (4,false) (32,true) (32,false) (10,true) (29,true) (7,false) (40,true) (3,true) } Edges: { (4,false)->(40,true) (29,true)->(10,true) (9,false)->(29,true) (9,false)->(7,false) (29,true)->(32,false) (3,true)->(32,true) (29,true)->(10,false) (4,false)->(9,false) (32,true)->(10,true) (40,true)->(9,false) (2,false)->(7,false) (32,true)->(10,false) (40,true)->(29,true) (29,true)->(32,true) }
Found resolution clause: not(x29) not(x32) not(x3) 
Added clause: not(x29) not(x32) not(x3) 
Running conflict analysis on implication graph: Nodes: { (9,false) (10,false) (2,false) (4,false) (32,true) (32,false) (10,true) (29,true) (7,false) (40,true) (3,true) } Edges: { (4,false)->(40,true) (29,true)->(10,true) (9,false)->(29,true) (9,false)->(7,false) (29,true)->(32,false) (3,true)->(32,true) (29,true)->(10,false) (4,false)->(9,false) (32,true)->(10,true) (40,true)->(9,false) (2,false)->(7,false) (32,true)->(10,false) (40,true)->(29,true) (29,true)->(32,true) }
Found resolution clause: not(x29) not(x32) not(x3) 
Backjumping
PRUNING List((0,true), (1,true), (2,false), (3,false))
DEDUCING
Stack=(2,false) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,false))
DEDUCING
Stack=(2,false) (1,true) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,false))
Trying: (3,false)
Propogating:List(1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x0) x3 not(x31) ; Literal: not(x31) 
Found unit clause:not(x0) not(x13) x31 ; Literal: not(x13) 
Done Propogating:List(1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,false) (2,false) (1,true) (0,true) 
Impl=Nodes: { (0,true) (3,false) (31,false) (13,false) } Edges: { (0,true)->(13,false) (31,false)->(13,false) (3,false)->(31,false) (0,true)->(31,false) }
VarVals=List(1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,false), (3,false))
Trying: (4,true)
Propogating:List(1, 1, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x6) x13 not(x4) not(x29) ; Literal: not(x6) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) x13 ; Literal: x32 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x4) not(x32) x10 ; Literal: x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Done Propogating:List(1, 1, 0, 0, 1, -1, 0, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (4,true) (0,true) (10,false) (3,false) (32,true) (32,false) (31,false) (10,true) (13,false) (29,true) } Edges: { (0,true)->(13,false) (29,true)->(6,false) (4,true)->(6,false) (29,true)->(10,true) (3,false)->(31,false) (29,true)->(32,false) (29,true)->(10,false) (4,true)->(32,false) (32,true)->(10,true) (13,false)->(32,true) (13,false)->(6,false) (32,true)->(10,false) (31,false)->(13,false) (4,true)->(10,true) (4,true)->(29,true) (0,true)->(31,false) (29,true)->(32,true) }
Found resolution clause: not(x29) not(x32) not(x4) x13 
Added clause: not(x29) not(x32) not(x4) x13 
DEDUCING
Stack=(3,false) (2,false) (1,true) (0,true) 
Impl=Nodes: { (0,true) (3,false) (31,false) (13,false) } Edges: { (0,true)->(13,false) (31,false)->(13,false) (3,false)->(31,false) (0,true)->(31,false) }
VarVals=List(1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,true), (2,false), (3,false))
Trying: (4,false)
Propogating:List(1, 1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:x2 not(x7) x9 ; Literal: not(x7) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) x13 ; Literal: x32 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Done Propogating:List(1, 1, 0, 0, 0, -1, -1, 0, -1, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (9,false) (0,true) (2,false) (4,false) (32,true) (32,false) (31,false) (40,true) (10,false) (3,false) (10,true) (13,false) (29,true) (7,false) } Edges: { (4,false)->(40,true) (0,true)->(13,false) (29,true)->(10,true) (9,false)->(29,true) (9,false)->(7,false) (3,false)->(31,false) (29,true)->(32,false) (29,true)->(10,false) (4,false)->(9,false) (32,true)->(10,true) (40,true)->(9,false) (2,false)->(7,false) (13,false)->(32,true) (32,true)->(10,false) (31,false)->(13,false) (40,true)->(29,true) (0,true)->(31,false) (29,true)->(32,true) }
Found resolution clause: x13 not(x29) not(x32) 
Added clause: x13 not(x29) not(x32) 
Running conflict analysis on implication graph: Nodes: { (9,false) (0,true) (2,false) (4,false) (32,true) (32,false) (31,false) (40,true) (10,false) (3,false) (10,true) (13,false) (29,true) (7,false) } Edges: { (4,false)->(40,true) (0,true)->(13,false) (29,true)->(10,true) (9,false)->(29,true) (9,false)->(7,false) (3,false)->(31,false) (29,true)->(32,false) (29,true)->(10,false) (4,false)->(9,false) (32,true)->(10,true) (40,true)->(9,false) (2,false)->(7,false) (13,false)->(32,true) (32,true)->(10,false) (31,false)->(13,false) (40,true)->(29,true) (0,true)->(31,false) (29,true)->(32,true) }
Found resolution clause: x13 not(x29) not(x32) 
Backjumping
PRUNING List((0,true), (1,true), (2,false), (3,true))
Backjumping
PRUNING List((0,true), (1,true), (2,true))
Backjumping
PRUNING List((0,true), (1,false))
DEDUCING
Stack=(0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true))
DEDUCING
Stack=(0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true))
Trying: (1,false)
Propogating:List(1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false))
Trying: (2,true)
Propogating:List(1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(2,true) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,true))
Trying: (3,true)
Propogating:List(1, 0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,true) (2,true) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,true), (3,true))
Trying: (4,true)
Propogating:List(1, 0, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) not(x3) ; Literal: x32 
Found unit clause:not(x29) not(x32) not(x3) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x4) not(x32) x10 ; Literal: x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Found unit clause:not(x29) not(x32) not(x4) x13 ; Literal: x13 
Found unit clause:x13 not(x29) not(x32) ; Literal: x13 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x6) 
Found unit clause:not(x0) not(x13) x31 ; Literal: x31 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x5) x6 ; Literal: not(x5) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x37) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x5 not(x23) x37 ; Literal: not(x23) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Done Propogating:List(1, 0, 1, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (4,true) (0,true) (23,false) (32,true) (32,false) (13,true) (37,false) (3,true) (31,true) (10,false) (5,false) (10,true) (29,true) } Edges: { (6,false)->(5,false) (29,true)->(10,true) (4,true)->(13,true) (5,false)->(37,false) (13,true)->(6,false) (0,true)->(31,true) (29,true)->(32,false) (31,true)->(37,false) (29,true)->(13,true) (3,true)->(32,true) (29,true)->(10,false) (3,true)->(6,false) (4,true)->(32,false) (32,true)->(10,true) (37,false)->(23,false) (3,true)->(32,false) (5,false)->(23,false) (32,true)->(10,false) (4,true)->(10,true) (4,true)->(29,true) (13,true)->(31,true) (32,true)->(13,true) (3,true)->(5,false) (29,true)->(32,true) }
Found resolution clause: not(x3) not(x29) not(x4) not(x32) 
Added clause: not(x3) not(x29) not(x4) not(x32) 
DEDUCING
Stack=(3,true) (2,true) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,true), (3,true))
Trying: (4,false)
Propogating:List(1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) not(x3) ; Literal: x32 
Found unit clause:not(x29) not(x32) not(x3) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Found unit clause:x13 not(x29) not(x32) ; Literal: x13 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x6) 
Found unit clause:not(x0) not(x13) x31 ; Literal: x31 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x8 not(x18) not(x20) ; Literal: x8 
Found unit clause:not(x3) not(x5) x6 ; Literal: not(x5) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x37) 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x5 not(x23) x37 ; Literal: not(x23) 
Found unit clause:x37 x42 x48 ; Literal: x42 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Done Propogating:List(1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 0, 0, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 0, 0, -1, -1, 1, -1, 1, -1, -1, -1, 0, -1, 0, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (9,false) (36,false) (0,true) (48,false) (42,true) (23,false) (4,false) (32,true) (32,false) (13,true) (37,false) (40,true) (3,true) (46,false) (31,true) (2,true) (18,true) (10,false) (5,false) (20,true) (10,true) (11,false) (8,true) (29,true) } Edges: { (29,true)->(10,true) (0,true)->(31,true) (18,true)->(20,true) (11,false)->(20,true) (31,true)->(37,false) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (3,true)->(32,true) (29,true)->(10,false) (4,false)->(9,false) (40,true)->(9,false) (37,false)->(23,false) (5,false)->(23,false) (48,false)->(42,true) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (3,true)->(5,false) (29,true)->(32,true) (4,false)->(40,true) (6,false)->(5,false) (5,false)->(37,false) (46,false)->(18,true) (13,true)->(6,false) (9,false)->(29,true) (29,true)->(32,false) (29,true)->(13,true) (3,true)->(6,false) (32,true)->(10,true) (20,true)->(8,true) (10,false)->(48,false) (3,true)->(32,false) (46,false)->(11,false) (32,true)->(10,false) (13,true)->(31,true) (9,false)->(46,false) (18,true)->(11,false) (32,true)->(13,true) (37,false)->(42,true) (2,true)->(46,false) }
Found resolution clause: not(x3) not(x29) not(x32) 
Added clause: not(x3) not(x29) not(x32) 
Running conflict analysis on implication graph: Nodes: { (6,false) (9,false) (36,false) (0,true) (48,false) (42,true) (23,false) (4,false) (32,true) (32,false) (13,true) (37,false) (40,true) (3,true) (46,false) (31,true) (2,true) (18,true) (10,false) (5,false) (20,true) (10,true) (11,false) (8,true) (29,true) } Edges: { (29,true)->(10,true) (0,true)->(31,true) (18,true)->(20,true) (11,false)->(20,true) (31,true)->(37,false) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (3,true)->(32,true) (29,true)->(10,false) (4,false)->(9,false) (40,true)->(9,false) (37,false)->(23,false) (5,false)->(23,false) (48,false)->(42,true) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (3,true)->(5,false) (29,true)->(32,true) (4,false)->(40,true) (6,false)->(5,false) (5,false)->(37,false) (46,false)->(18,true) (13,true)->(6,false) (9,false)->(29,true) (29,true)->(32,false) (29,true)->(13,true) (3,true)->(6,false) (32,true)->(10,true) (20,true)->(8,true) (10,false)->(48,false) (3,true)->(32,false) (46,false)->(11,false) (32,true)->(10,false) (13,true)->(31,true) (9,false)->(46,false) (18,true)->(11,false) (32,true)->(13,true) (37,false)->(42,true) (2,true)->(46,false) }
Found resolution clause: not(x3) not(x29) not(x32) 
Backjumping
PRUNING List((0,true), (1,false), (2,true), (3,false))
DEDUCING
Stack=(2,true) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,true))
DEDUCING
Stack=(2,true) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,true))
Trying: (3,false)
Propogating:List(1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x0) x3 not(x31) ; Literal: not(x31) 
Found unit clause:not(x0) not(x13) x31 ; Literal: not(x13) 
Done Propogating:List(1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,false) (2,true) (1,false) (0,true) 
Impl=Nodes: { (0,true) (3,false) (31,false) (13,false) } Edges: { (0,true)->(13,false) (31,false)->(13,false) (3,false)->(31,false) (0,true)->(31,false) }
VarVals=List(1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,true), (3,false))
Trying: (4,true)
Propogating:List(1, 0, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x6) x13 not(x4) not(x29) ; Literal: not(x6) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) x13 ; Literal: x32 
Found unit clause:not(x29) not(x32) not(x4) x13 ; Literal: not(x32) 
Found unit clause:x13 not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x4) not(x32) x10 ; Literal: x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x4) x13 
Bad clause:x13 not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x4) x13 
Bad clause:x13 not(x29) not(x32) 
Done Propogating:List(1, 0, 1, 0, 1, -1, 0, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (4,true) (0,true) (10,false) (3,false) (32,true) (32,false) (31,false) (10,true) (13,false) (29,true) } Edges: { (0,true)->(13,false) (29,true)->(6,false) (4,true)->(6,false) (29,true)->(10,true) (3,false)->(31,false) (29,true)->(32,false) (13,false)->(32,false) (29,true)->(10,false) (4,true)->(32,false) (32,true)->(10,true) (13,false)->(32,true) (13,false)->(6,false) (32,true)->(10,false) (31,false)->(13,false) (4,true)->(10,true) (4,true)->(29,true) (0,true)->(31,false) (29,true)->(32,true) }
Found resolution clause: not(x29) not(x32) not(x4) x13 
Added clause: not(x29) not(x32) not(x4) x13 
DEDUCING
Stack=(3,false) (2,true) (1,false) (0,true) 
Impl=Nodes: { (0,true) (3,false) (31,false) (13,false) } Edges: { (0,true)->(13,false) (31,false)->(13,false) (3,false)->(31,false) (0,true)->(31,false) }
VarVals=List(1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,true), (3,false))
Trying: (4,false)
Propogating:List(1, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) x13 ; Literal: x32 
Found unit clause:x13 not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x13 not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x13 not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x8 not(x18) not(x20) ; Literal: x8 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x13 not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x13 not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x13 not(x29) not(x32) 
Done Propogating:List(1, 0, 1, 0, 0, -1, -1, -1, 1, 0, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, -1, -1, -1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, 0, -1, 0, -1)
Running conflict analysis on implication graph: Nodes: { (9,false) (0,true) (36,false) (48,false) (4,false) (32,true) (32,false) (31,false) (40,true) (46,false) (2,true) (18,true) (3,false) (10,false) (20,true) (10,true) (11,false) (13,false) (29,true) (8,true) } Edges: { (0,true)->(13,false) (29,true)->(10,true) (18,true)->(20,true) (11,false)->(20,true) (3,false)->(31,false) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (13,false)->(32,false) (29,true)->(10,false) (4,false)->(9,false) (40,true)->(9,false) (31,false)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (29,true)->(32,true) (4,false)->(40,true) (46,false)->(18,true) (9,false)->(29,true) (29,true)->(32,false) (32,true)->(10,true) (20,true)->(8,true) (10,false)->(48,false) (46,false)->(11,false) (13,false)->(32,true) (32,true)->(10,false) (9,false)->(46,false) (18,true)->(11,false) (0,true)->(31,false) (2,true)->(46,false) }
Found resolution clause: not(x29) x13 not(x32) 
Added clause: not(x29) x13 not(x32) 
Running conflict analysis on implication graph: Nodes: { (9,false) (0,true) (36,false) (48,false) (4,false) (32,true) (32,false) (31,false) (40,true) (46,false) (2,true) (18,true) (3,false) (10,false) (20,true) (10,true) (11,false) (13,false) (29,true) (8,true) } Edges: { (0,true)->(13,false) (29,true)->(10,true) (18,true)->(20,true) (11,false)->(20,true) (3,false)->(31,false) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (13,false)->(32,false) (29,true)->(10,false) (4,false)->(9,false) (40,true)->(9,false) (31,false)->(13,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (29,true)->(32,true) (4,false)->(40,true) (46,false)->(18,true) (9,false)->(29,true) (29,true)->(32,false) (32,true)->(10,true) (20,true)->(8,true) (10,false)->(48,false) (46,false)->(11,false) (13,false)->(32,true) (32,true)->(10,false) (9,false)->(46,false) (18,true)->(11,false) (0,true)->(31,false) (2,true)->(46,false) }
Found resolution clause: not(x29) x13 not(x32) 
Backjumping
PRUNING List((0,true), (1,false), (2,true), (3,true))
Backjumping
PRUNING List((0,true), (1,false), (2,false))
DEDUCING
Stack=(1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false))
DEDUCING
Stack=(1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false))
Trying: (2,false)
Propogating:List(1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(2,false) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,false))
Trying: (3,true)
Propogating:List(1, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(1, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,true) (2,false) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,false), (3,true))
Trying: (4,true)
Propogating:List(1, 0, 0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) not(x3) ; Literal: x32 
Found unit clause:not(x29) not(x32) not(x3) ; Literal: not(x32) 
Found unit clause:not(x3) not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x3) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x4) not(x32) x10 ; Literal: x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Found unit clause:not(x29) not(x32) not(x4) x13 ; Literal: x13 
Found unit clause:x13 not(x29) not(x32) ; Literal: x13 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Found unit clause:not(x29) not(x32) not(x4) x13 ; Literal: x13 
Found unit clause:not(x29) x13 not(x32) ; Literal: x13 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x6) 
Found unit clause:not(x0) not(x13) x31 ; Literal: x31 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x5) x6 ; Literal: not(x5) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x37) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x5 not(x23) x37 ; Literal: not(x23) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Done Propogating:List(1, 0, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (4,true) (0,true) (23,false) (32,true) (32,false) (13,true) (37,false) (3,true) (31,true) (10,false) (5,false) (10,true) (29,true) } Edges: { (6,false)->(5,false) (29,true)->(10,true) (4,true)->(13,true) (5,false)->(37,false) (13,true)->(6,false) (0,true)->(31,true) (29,true)->(32,false) (31,true)->(37,false) (29,true)->(13,true) (3,true)->(32,true) (29,true)->(10,false) (3,true)->(6,false) (4,true)->(32,false) (32,true)->(10,true) (37,false)->(23,false) (3,true)->(32,false) (5,false)->(23,false) (32,true)->(10,false) (4,true)->(10,true) (4,true)->(29,true) (13,true)->(31,true) (32,true)->(13,true) (3,true)->(5,false) (29,true)->(32,true) }
Found resolution clause: not(x3) not(x29) not(x4) not(x32) 
Added clause: not(x3) not(x29) not(x4) not(x32) 
DEDUCING
Stack=(3,true) (2,false) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,false), (3,true))
Trying: (4,false)
Propogating:List(1, 0, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:x2 not(x7) x9 ; Literal: not(x7) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) not(x3) ; Literal: x32 
Found unit clause:not(x29) not(x32) not(x3) ; Literal: not(x32) 
Found unit clause:not(x3) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Found unit clause:x13 not(x29) not(x32) ; Literal: x13 
Bad clause:not(x3) not(x29) not(x32) 
Found unit clause:not(x29) x13 not(x32) ; Literal: x13 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x6) 
Found unit clause:not(x0) not(x13) x31 ; Literal: x31 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x5) x6 ; Literal: not(x5) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x37) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x5 not(x23) x37 ; Literal: not(x23) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x32) 
Done Propogating:List(1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (9,false) (0,true) (2,false) (23,false) (4,false) (32,true) (32,false) (13,true) (37,false) (40,true) (3,true) (31,true) (10,false) (5,false) (10,true) (29,true) (7,false) } Edges: { (4,false)->(40,true) (6,false)->(5,false) (29,true)->(10,true) (5,false)->(37,false) (13,true)->(6,false) (0,true)->(31,true) (9,false)->(29,true) (9,false)->(7,false) (29,true)->(32,false) (31,true)->(37,false) (29,true)->(13,true) (3,true)->(32,true) (29,true)->(10,false) (3,true)->(6,false) (4,false)->(9,false) (32,true)->(10,true) (40,true)->(9,false) (2,false)->(7,false) (37,false)->(23,false) (3,true)->(32,false) (5,false)->(23,false) (32,true)->(10,false) (13,true)->(31,true) (40,true)->(29,true) (32,true)->(13,true) (3,true)->(5,false) (29,true)->(32,true) }
Found resolution clause: not(x3) not(x29) not(x32) 
Added clause: not(x3) not(x29) not(x32) 
Running conflict analysis on implication graph: Nodes: { (6,false) (9,false) (0,true) (2,false) (23,false) (4,false) (32,true) (32,false) (13,true) (37,false) (40,true) (3,true) (31,true) (10,false) (5,false) (10,true) (29,true) (7,false) } Edges: { (4,false)->(40,true) (6,false)->(5,false) (29,true)->(10,true) (5,false)->(37,false) (13,true)->(6,false) (0,true)->(31,true) (9,false)->(29,true) (9,false)->(7,false) (29,true)->(32,false) (31,true)->(37,false) (29,true)->(13,true) (3,true)->(32,true) (29,true)->(10,false) (3,true)->(6,false) (4,false)->(9,false) (32,true)->(10,true) (40,true)->(9,false) (2,false)->(7,false) (37,false)->(23,false) (3,true)->(32,false) (5,false)->(23,false) (32,true)->(10,false) (13,true)->(31,true) (40,true)->(29,true) (32,true)->(13,true) (3,true)->(5,false) (29,true)->(32,true) }
Found resolution clause: not(x3) not(x29) not(x32) 
Backjumping
PRUNING List((0,true), (1,false), (2,false), (3,false))
DEDUCING
Stack=(2,false) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,false))
DEDUCING
Stack=(2,false) (1,false) (0,true) 
Impl=Nodes: { } Edges: { }
VarVals=List(1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,false))
Trying: (3,false)
Propogating:List(1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x0) x3 not(x31) ; Literal: not(x31) 
Found unit clause:not(x0) not(x13) x31 ; Literal: not(x13) 
Done Propogating:List(1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,false) (2,false) (1,false) (0,true) 
Impl=Nodes: { (0,true) (3,false) (31,false) (13,false) } Edges: { (0,true)->(13,false) (31,false)->(13,false) (3,false)->(31,false) (0,true)->(31,false) }
VarVals=List(1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,false), (3,false))
Trying: (4,true)
Propogating:List(1, 0, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x6) x13 not(x4) not(x29) ; Literal: not(x6) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) x13 ; Literal: x32 
Found unit clause:not(x29) not(x32) not(x4) x13 ; Literal: not(x32) 
Found unit clause:x13 not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) not(x4) x13 ; Literal: not(x32) 
Found unit clause:not(x29) x13 not(x32) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x4) not(x32) x10 ; Literal: x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x4) x13 
Bad clause:x13 not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x4) x13 
Bad clause:not(x29) x13 not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x4) x13 
Bad clause:x13 not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x4) x13 
Bad clause:not(x29) x13 not(x32) 
Done Propogating:List(1, 0, 0, 0, 1, -1, 0, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (4,true) (0,true) (10,false) (3,false) (32,true) (32,false) (31,false) (10,true) (13,false) (29,true) } Edges: { (0,true)->(13,false) (29,true)->(6,false) (4,true)->(6,false) (29,true)->(10,true) (3,false)->(31,false) (29,true)->(32,false) (13,false)->(32,false) (29,true)->(10,false) (4,true)->(32,false) (32,true)->(10,true) (13,false)->(32,true) (13,false)->(6,false) (32,true)->(10,false) (31,false)->(13,false) (4,true)->(10,true) (4,true)->(29,true) (0,true)->(31,false) (29,true)->(32,true) }
Found resolution clause: not(x29) not(x32) not(x4) x13 
Added clause: not(x29) not(x32) not(x4) x13 
DEDUCING
Stack=(3,false) (2,false) (1,false) (0,true) 
Impl=Nodes: { (0,true) (3,false) (31,false) (13,false) } Edges: { (0,true)->(13,false) (31,false)->(13,false) (3,false)->(31,false) (0,true)->(31,false) }
VarVals=List(1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,true), (1,false), (2,false), (3,false))
Trying: (4,false)
Propogating:List(1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:x2 not(x7) x9 ; Literal: not(x7) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) x13 ; Literal: x32 
Found unit clause:x13 not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) x13 not(x32) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x13 not(x29) not(x32) 
Bad clause:not(x29) x13 not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:x13 not(x29) not(x32) 
Bad clause:not(x29) x13 not(x32) 
Done Propogating:List(1, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (9,false) (0,true) (2,false) (4,false) (32,true) (32,false) (31,false) (40,true) (10,false) (3,false) (10,true) (13,false) (29,true) (7,false) } Edges: { (4,false)->(40,true) (0,true)->(13,false) (29,true)->(10,true) (9,false)->(29,true) (9,false)->(7,false) (3,false)->(31,false) (29,true)->(32,false) (13,false)->(32,false) (29,true)->(10,false) (4,false)->(9,false) (32,true)->(10,true) (40,true)->(9,false) (2,false)->(7,false) (13,false)->(32,true) (32,true)->(10,false) (31,false)->(13,false) (40,true)->(29,true) (0,true)->(31,false) (29,true)->(32,true) }
Found resolution clause: x13 not(x29) not(x32) 
Added clause: x13 not(x29) not(x32) 
Running conflict analysis on implication graph: Nodes: { (9,false) (0,true) (2,false) (4,false) (32,true) (32,false) (31,false) (40,true) (10,false) (3,false) (10,true) (13,false) (29,true) (7,false) } Edges: { (4,false)->(40,true) (0,true)->(13,false) (29,true)->(10,true) (9,false)->(29,true) (9,false)->(7,false) (3,false)->(31,false) (29,true)->(32,false) (13,false)->(32,false) (29,true)->(10,false) (4,false)->(9,false) (32,true)->(10,true) (40,true)->(9,false) (2,false)->(7,false) (13,false)->(32,true) (32,true)->(10,false) (31,false)->(13,false) (40,true)->(29,true) (0,true)->(31,false) (29,true)->(32,true) }
Found resolution clause: x13 not(x29) not(x32) 
Backjumping
PRUNING List((0,true), (1,false), (2,false), (3,true))
Backjumping
PRUNING List((0,true), (1,false), (2,true))
Backjumping
PRUNING List((0,true), (1,true))
Backjumping
PRUNING List((0,false))
Trying: (0,false)
Propogating:List(0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false))
Trying: (1,true)
Propogating:List(0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(1,true) (0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true))
Trying: (2,true)
Propogating:List(0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(2,true) (1,true) (0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true))
Trying: (3,true)
Propogating:List(0, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,true) (2,true) (1,true) (0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,true))
Trying: (4,true)
Propogating:List(0, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) not(x3) ; Literal: x32 
Found unit clause:not(x29) not(x32) not(x3) ; Literal: not(x32) 
Found unit clause:not(x3) not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x3) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x3) not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x3) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x4) not(x32) x10 ; Literal: x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Found unit clause:not(x29) not(x32) not(x4) x13 ; Literal: x13 
Found unit clause:x13 not(x29) not(x32) ; Literal: x13 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Found unit clause:not(x29) not(x32) not(x4) x13 ; Literal: x13 
Found unit clause:not(x29) x13 not(x32) ; Literal: x13 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Found unit clause:not(x29) not(x32) not(x4) x13 ; Literal: x13 
Found unit clause:x13 not(x29) not(x32) ; Literal: x13 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x6) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x5) x6 ; Literal: not(x5) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x4) not(x32) x10 
Bad clause:not(x29) not(x4) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:not(x3) not(x29) not(x4) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Done Propogating:List(0, 1, 1, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (4,true) (10,false) (5,false) (32,true) (32,false) (10,true) (13,true) (29,true) (3,true) } Edges: { (6,false)->(5,false) (29,true)->(10,true) (4,true)->(13,true) (13,true)->(6,false) (29,true)->(32,false) (29,true)->(13,true) (3,true)->(32,true) (29,true)->(10,false) (3,true)->(6,false) (4,true)->(32,false) (32,true)->(10,true) (3,true)->(32,false) (32,true)->(10,false) (4,true)->(10,true) (4,true)->(29,true) (32,true)->(13,true) (3,true)->(5,false) (29,true)->(32,true) }
Found resolution clause: not(x29) not(x32) not(x4) not(x3) 
Added clause: not(x29) not(x32) not(x4) not(x3) 
DEDUCING
Stack=(3,true) (2,true) (1,true) (0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,true))
Trying: (4,false)
Propogating:List(0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x32 not(x29) not(x3) ; Literal: x32 
Found unit clause:not(x29) not(x32) not(x3) ; Literal: not(x32) 
Found unit clause:not(x3) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x3) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x10 not(x29) not(x32) ; Literal: x10 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x10) 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Found unit clause:x13 not(x29) not(x32) ; Literal: x13 
Bad clause:not(x3) not(x29) not(x32) 
Found unit clause:not(x29) x13 not(x32) ; Literal: x13 
Bad clause:not(x3) not(x29) not(x32) 
Found unit clause:x13 not(x29) not(x32) ; Literal: x13 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x3) not(x6) not(x13) ; Literal: not(x6) 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:x8 not(x18) not(x20) ; Literal: x8 
Found unit clause:not(x3) not(x5) x6 ; Literal: not(x5) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:x10 not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) 
Bad clause:not(x29) not(x32) not(x3) 
Bad clause:not(x3) not(x29) not(x32) 
Bad clause:not(x3) not(x29) not(x32) 
Done Propogating:List(0, 1, 1, 1, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, 0, -1, 0, -1)
Running conflict analysis on implication graph: Nodes: { (6,false) (9,false) (36,false) (48,false) (4,false) (32,true) (32,false) (13,true) (12,false) (40,true) (3,true) (1,true) (46,false) (2,true) (18,true) (10,false) (5,false) (20,true) (10,true) (11,false) (8,true) (29,true) } Edges: { (29,true)->(10,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (3,true)->(32,true) (29,true)->(10,false) (4,false)->(9,false) (40,true)->(9,false) (11,false)->(12,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (3,true)->(5,false) (29,true)->(32,true) (4,false)->(40,true) (6,false)->(5,false) (46,false)->(18,true) (13,true)->(6,false) (9,false)->(29,true) (29,true)->(32,false) (29,true)->(13,true) (3,true)->(6,false) (32,true)->(10,true) (20,true)->(8,true) (10,false)->(48,false) (3,true)->(32,false) (46,false)->(11,false) (1,true)->(12,false) (32,true)->(10,false) (9,false)->(46,false) (18,true)->(11,false) (32,true)->(13,true) (2,true)->(46,false) }
Found resolution clause: not(x3) not(x29) not(x32) 
Added clause: not(x3) not(x29) not(x32) 
Running conflict analysis on implication graph: Nodes: { (6,false) (9,false) (36,false) (48,false) (4,false) (32,true) (32,false) (13,true) (12,false) (40,true) (3,true) (1,true) (46,false) (2,true) (18,true) (10,false) (5,false) (20,true) (10,true) (11,false) (8,true) (29,true) } Edges: { (29,true)->(10,true) (18,true)->(20,true) (11,false)->(20,true) (2,true)->(36,false) (8,true)->(48,false) (9,false)->(18,true) (3,true)->(32,true) (29,true)->(10,false) (4,false)->(9,false) (40,true)->(9,false) (11,false)->(12,false) (40,true)->(29,true) (9,false)->(36,false) (18,true)->(8,true) (3,true)->(5,false) (29,true)->(32,true) (4,false)->(40,true) (6,false)->(5,false) (46,false)->(18,true) (13,true)->(6,false) (9,false)->(29,true) (29,true)->(32,false) (29,true)->(13,true) (3,true)->(6,false) (32,true)->(10,true) (20,true)->(8,true) (10,false)->(48,false) (3,true)->(32,false) (46,false)->(11,false) (1,true)->(12,false) (32,true)->(10,false) (9,false)->(46,false) (18,true)->(11,false) (32,true)->(13,true) (2,true)->(46,false) }
Found resolution clause: not(x3) not(x29) not(x32) 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false))
DEDUCING
Stack=(2,true) (1,true) (0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true))
DEDUCING
Stack=(2,true) (1,true) (0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true))
Trying: (3,false)
Propogating:List(0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false))
Trying: (4,true)
Propogating:List(0, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (3,false) (5,false) (32,false) (31,false) (13,true) (29,true) (37,true) (0,false) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (0,false)->(33,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true))
Trying: (7,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (3,false) (5,false) (32,false) (31,false) (13,true) (29,true) (37,true) (0,false) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (0,false)->(33,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true))
Trying: (8,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (3,false) (5,false) (32,false) (31,false) (13,true) (29,true) (37,true) (0,false) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (0,false)->(33,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true))
Trying: (9,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (7,true) (3,false) (5,false) (11,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (1,true)->(11,true) (41,false)->(16,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (0,false)->(33,false) (13,true)->(28,false) (12,true)->(11,true) (1,true)->(41,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true))
Trying: (10,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x20) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true))
Trying: (14,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true))
Trying: (15,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true))
Trying: (17,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
DEDUCING
Stack=(17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, -1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true))
Trying: (18,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x11) not(x18) x46 ; Literal: x46 
Found unit clause:x22 x41 not(x46) ; Literal: x22 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, -1, 0, -1, 1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, 1, -1, -1, -1)
DEDUCING
Stack=(18,true) (17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (46,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (22,true) (12,true) (0,false) (1,true) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (46,true)->(22,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (4,true)->(32,false) (23,true)->(33,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, -1, 0, -1, 1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, 1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true))
Trying: (19,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, -1, 1, 1, -1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, 1, -1, -1, -1)
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x45) 
Found unit clause:not(x22) not(x35) x45 ; Literal: not(x35) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, -1, 1, 1, -1, -1, 1, -1, 0, 1, -1, 0, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, -1, -1, 0, 1, -1, -1, -1)
DEDUCING
Stack=(19,true) (18,true) (17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (46,true) (33,false) (6,true) (23,true) (28,false) (32,false) (31,false) (22,true) (12,true) (0,false) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (4,true) (16,false) (15,true) (41,false) (13,true) (1,true) (26,true) (11,true) (45,false) (37,true) (35,false) } Edges: { (26,true)->(45,false) (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (22,true)->(26,true) (45,false)->(35,false) (15,true)->(45,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (46,true)->(22,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (4,true)->(32,false) (23,true)->(33,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (29,true)->(6,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, -1, 1, 1, -1, -1, 1, -1, 0, 1, -1, 0, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, -1, -1, 0, 1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true), (19,true))
Trying: (21,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, -1, -1, 1, -1, 0, 1, -1, 0, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, -1, -1, 0, 1, -1, -1, -1)
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, -1, -1, 1, -1, 0, 1, -1, 0, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, -1, -1, 0, 1, -1, -1, -1)
DEDUCING
Stack=(21,true) (19,true) (18,true) (17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (46,true) (33,false) (6,true) (23,true) (28,false) (32,false) (31,false) (22,true) (12,true) (0,false) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (4,true) (16,false) (15,true) (41,false) (13,true) (1,true) (26,true) (11,true) (45,false) (37,true) (35,false) } Edges: { (26,true)->(45,false) (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (22,true)->(26,true) (45,false)->(35,false) (15,true)->(45,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (46,true)->(22,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (4,true)->(32,false) (23,true)->(33,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (29,true)->(6,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, -1, -1, 1, -1, 0, 1, -1, 0, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, -1, -1, 0, 1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true), (19,true), (21,true))
Trying: (24,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, -1, 1, -1, 0, 1, -1, 0, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, -1, -1, 0, 1, -1, -1, -1)
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x47) 
Found unit clause:x31 x43 x47 ; Literal: x43 
Found unit clause:not(x37) not(x43) x47 ; Literal: not(x43) 
Bad clause:x31 x43 x47 
Found unit clause:not(x14) x43 x48 ; Literal: x48 
Bad clause:x31 x43 x47 
Found unit clause:not(x14) not(x30) not(x48) ; Literal: not(x30) 
Bad clause:x31 x43 x47 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, -1, 1, -1, 0, 1, 0, 0, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, 0, -1, 0, 1, 0, 1, -1)
Running conflict analysis on implication graph: Nodes: { (46,true) (30,false) (33,false) (6,true) (23,true) (28,false) (32,false) (31,false) (22,true) (12,true) (0,false) (20,false) (7,true) (18,true) (3,false) (43,true) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (14,true) (4,true) (16,false) (15,true) (41,false) (13,true) (48,true) (47,false) (1,true) (24,true) (26,true) (43,false) (11,true) (45,false) (37,true) (21,true) (35,false) } Edges: { (14,true)->(30,false) (26,true)->(45,false) (32,false)->(13,true) (24,true)->(47,false) (5,false)->(37,true) (14,true)->(48,true) (48,true)->(30,false) (37,true)->(31,false) (22,true)->(26,true) (45,false)->(35,false) (37,true)->(43,false) (15,true)->(45,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (31,false)->(43,true) (46,true)->(22,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (21,true)->(47,false) (43,false)->(48,true) (4,true)->(32,false) (23,true)->(33,false) (47,false)->(43,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (29,true)->(6,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (47,false)->(43,true) (13,true)->(28,false) (33,false)->(5,false) }
Found resolution clause: x31 x47 not(x37) 
Added clause: x31 x47 not(x37) 
DEDUCING
Stack=(21,true) (19,true) (18,true) (17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (46,true) (33,false) (6,true) (23,true) (28,false) (32,false) (31,false) (22,true) (12,true) (0,false) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (4,true) (16,false) (15,true) (41,false) (13,true) (1,true) (26,true) (11,true) (45,false) (37,true) (35,false) } Edges: { (26,true)->(45,false) (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (22,true)->(26,true) (45,false)->(35,false) (15,true)->(45,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (46,true)->(22,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (4,true)->(32,false) (23,true)->(33,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (29,true)->(6,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, -1, -1, 1, -1, 0, 1, -1, 0, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, -1, -1, 0, 1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true), (19,true), (21,true))
Trying: (24,false)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, -1, 0, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, -1, -1, 0, 1, -1, -1, -1)
Found unit clause:not(x21) x24 x39 ; Literal: x39 
Found unit clause:x31 x47 not(x37) ; Literal: x47 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x34) not(x42) not(x49) ; Literal: not(x49) 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Found unit clause:not(x14) not(x30) not(x48) ; Literal: not(x48) 
Bad clause:not(x14) x43 x48 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, -1, 1, 1, 1, -1, 0, 1, 0, 0, 0, 1, 1, 0, 0)
Running conflict analysis on implication graph: Nodes: { (46,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (22,true) (38,true) (12,true) (0,false) (17,true) (20,false) (7,true) (18,true) (49,false) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (14,true) (4,true) (47,true) (27,true) (42,true) (16,false) (48,false) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (34,true) (11,true) (45,false) (37,true) (21,true) (35,false) } Edges: { (26,true)->(45,false) (32,false)->(13,true) (49,false)->(44,false) (31,false)->(47,true) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (45,false)->(35,false) (37,true)->(47,true) (17,true)->(27,true) (15,true)->(45,false) (0,false)->(23,true) (23,true)->(37,true) (1,true)->(41,false) (10,true)->(20,false) (7,true)->(12,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (38,true)->(42,true) (29,true)->(6,true) (30,true)->(48,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (44,false)->(43,false) (21,true)->(39,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (42,true)->(49,false) (1,true)->(11,true) (14,true)->(48,false) (24,false)->(39,true) (0,false)->(33,false) (12,true)->(11,true) (17,true)->(38,true) (34,true)->(49,false) (46,true)->(22,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (44,false)->(30,true) (41,false)->(22,true) (42,true)->(44,false) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) }
No conflict
Running conflict analysis on implication graph: Nodes: { (46,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (22,true) (38,true) (12,true) (0,false) (17,true) (20,false) (7,true) (18,true) (49,false) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (14,true) (4,true) (47,true) (27,true) (42,true) (16,false) (48,false) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (34,true) (11,true) (45,false) (37,true) (21,true) (35,false) } Edges: { (26,true)->(45,false) (32,false)->(13,true) (49,false)->(44,false) (31,false)->(47,true) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (45,false)->(35,false) (37,true)->(47,true) (17,true)->(27,true) (15,true)->(45,false) (0,false)->(23,true) (23,true)->(37,true) (1,true)->(41,false) (10,true)->(20,false) (7,true)->(12,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (38,true)->(42,true) (29,true)->(6,true) (30,true)->(48,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (44,false)->(43,false) (21,true)->(39,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (42,true)->(49,false) (1,true)->(11,true) (14,true)->(48,false) (24,false)->(39,true) (0,false)->(33,false) (12,true)->(11,true) (17,true)->(38,true) (34,true)->(49,false) (46,true)->(22,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (44,false)->(30,true) (41,false)->(22,true) (42,true)->(44,false) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) }
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true), (19,true), (21,false))
DEDUCING
Stack=(19,true) (18,true) (17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (46,true) (33,false) (6,true) (23,true) (28,false) (32,false) (31,false) (22,true) (12,true) (0,false) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (4,true) (16,false) (15,true) (41,false) (13,true) (1,true) (26,true) (11,true) (45,false) (37,true) (35,false) } Edges: { (26,true)->(45,false) (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (22,true)->(26,true) (45,false)->(35,false) (15,true)->(45,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (46,true)->(22,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (4,true)->(32,false) (23,true)->(33,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (29,true)->(6,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true), (19,true))
DEDUCING
Stack=(19,true) (18,true) (17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (46,true) (33,false) (6,true) (23,true) (28,false) (32,false) (31,false) (22,true) (12,true) (0,false) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (4,true) (16,false) (15,true) (41,false) (13,true) (1,true) (26,true) (11,true) (45,false) (37,true) (35,false) } Edges: { (26,true)->(45,false) (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (22,true)->(26,true) (45,false)->(35,false) (15,true)->(45,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (46,true)->(22,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (4,true)->(32,false) (23,true)->(33,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (29,true)->(6,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true), (19,true))
Trying: (21,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x20) 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:x11 not(x18) x20 ; Literal: x11 
Found unit clause:x6 not(x15) x20 ; Literal: x6 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x6) x13 x32 ; Literal: x13 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:not(x11) not(x18) x46 ; Literal: x46 
Found unit clause:not(x6) x13 not(x4) not(x29) ; Literal: x13 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:x22 x41 not(x46) ; Literal: x22 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x21 x28 not(x47) ; Literal: not(x47) 
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x45) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:not(x22) not(x35) x45 ; Literal: not(x35) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) not(x43) x47 ; Literal: not(x43) 
Found unit clause:x31 x47 not(x37) ; Literal: x31 
Bad clause:x5 not(x31) not(x37) 
Found unit clause:not(x14) x43 x48 ; Literal: x48 
Bad clause:x5 not(x31) not(x37) 
Found unit clause:not(x14) not(x30) not(x48) ; Literal: not(x30) 
Bad clause:x5 not(x31) not(x37) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, -1, -1, 1, -1, 0, 1, 0, 1, 0, 0, -1, 0, -1, 1, -1, -1, -1, 0, -1, 0, -1, 0, 1, 0, 1, -1)
Running conflict analysis on implication graph: Nodes: { (46,true) (30,false) (33,false) (6,true) (23,true) (28,false) (32,false) (31,false) (22,true) (12,true) (0,false) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (21,false) (14,true) (4,true) (16,false) (15,true) (41,false) (13,true) (48,true) (47,false) (1,true) (31,true) (26,true) (43,false) (11,true) (45,false) (37,true) (35,false) } Edges: { (14,true)->(30,false) (26,true)->(45,false) (20,false)->(11,true) (32,false)->(13,true) (5,false)->(37,true) (14,true)->(48,true) (48,true)->(30,false) (18,true)->(11,true) (37,true)->(31,false) (22,true)->(26,true) (45,false)->(35,false) (37,true)->(43,false) (15,true)->(45,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (37,true)->(31,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (15,true)->(6,true) (10,true)->(20,false) (28,false)->(47,false) (46,true)->(22,true) (4,true)->(13,true) (32,false)->(6,true) (7,true)->(12,true) (6,true)->(13,true) (29,true)->(32,false) (1,true)->(16,false) (20,false)->(6,true) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (43,false)->(48,true) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (47,false)->(43,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (29,true)->(6,true) (5,false)->(31,false) (47,false)->(31,true) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (21,false)->(47,false) (33,false)->(5,false) }
Found resolution clause: not(x37) x47 x5 
Added clause: not(x37) x47 x5 
Running conflict analysis on implication graph: Nodes: { (46,true) (30,false) (33,false) (6,true) (23,true) (28,false) (32,false) (31,false) (22,true) (12,true) (0,false) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (21,false) (14,true) (4,true) (16,false) (15,true) (41,false) (13,true) (48,true) (47,false) (1,true) (31,true) (26,true) (43,false) (11,true) (45,false) (37,true) (35,false) } Edges: { (14,true)->(30,false) (26,true)->(45,false) (20,false)->(11,true) (32,false)->(13,true) (5,false)->(37,true) (14,true)->(48,true) (48,true)->(30,false) (18,true)->(11,true) (37,true)->(31,false) (22,true)->(26,true) (45,false)->(35,false) (37,true)->(43,false) (15,true)->(45,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (37,true)->(31,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (15,true)->(6,true) (10,true)->(20,false) (28,false)->(47,false) (46,true)->(22,true) (4,true)->(13,true) (32,false)->(6,true) (7,true)->(12,true) (6,true)->(13,true) (29,true)->(32,false) (1,true)->(16,false) (20,false)->(6,true) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (22,true)->(35,false) (43,false)->(48,true) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (47,false)->(43,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (29,true)->(6,true) (5,false)->(31,false) (47,false)->(31,true) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (21,false)->(47,false) (33,false)->(5,false) }
Found resolution clause: not(x37) x47 x5 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true), (19,false))
DEDUCING
Stack=(18,true) (17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (46,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (22,true) (12,true) (0,false) (1,true) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (46,true)->(22,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (4,true)->(32,false) (23,true)->(33,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true))
DEDUCING
Stack=(18,true) (17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (46,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (22,true) (12,true) (0,false) (1,true) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (46,true)->(22,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (4,true)->(32,false) (23,true)->(33,false) (41,false)->(22,true) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,true))
Trying: (19,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x17) x19 not(x39) ; Literal: not(x39) 
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x20) 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:x11 not(x18) x20 ; Literal: x11 
Found unit clause:x6 not(x15) x20 ; Literal: x6 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x6) x13 x32 ; Literal: x13 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:not(x11) not(x18) x46 ; Literal: x46 
Found unit clause:not(x6) x13 not(x4) not(x29) ; Literal: x13 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:x22 x41 not(x46) ; Literal: x22 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:not(x21) x24 x39 ; Literal: x24 
Bad clause:not(x21) not(x24) not(x47) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, 0, -1, 0, -1, -1, -1, -1, 1, 1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (46,true) (33,false) (6,true) (23,true) (28,false) (24,false) (32,false) (31,false) (22,true) (12,true) (0,false) (19,false) (17,true) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (8,true) (29,true) (9,true) (4,true) (47,true) (16,false) (15,true) (41,false) (13,true) (39,false) (1,true) (24,true) (11,true) (37,true) (21,true) } Edges: { (20,false)->(11,true) (32,false)->(13,true) (47,true)->(24,false) (5,false)->(37,true) (18,true)->(11,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (1,true)->(11,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (15,true)->(6,true) (10,true)->(20,false) (17,true)->(39,false) (46,true)->(22,true) (4,true)->(13,true) (32,false)->(6,true) (7,true)->(12,true) (28,false)->(21,true) (6,true)->(13,true) (39,false)->(24,true) (29,true)->(32,false) (1,true)->(16,false) (20,false)->(6,true) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (41,false)->(22,true) (28,false)->(23,true) (19,false)->(39,false) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (21,true)->(24,true) (47,true)->(21,true) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
Found resolution clause: x39 not(x21) not(x47) 
Added clause: x39 not(x21) not(x47) 
Running conflict analysis on implication graph: Nodes: { (46,true) (33,false) (6,true) (23,true) (28,false) (24,false) (32,false) (31,false) (22,true) (12,true) (0,false) (19,false) (17,true) (20,false) (7,true) (18,true) (3,false) (5,false) (10,true) (8,true) (29,true) (9,true) (4,true) (47,true) (16,false) (15,true) (41,false) (13,true) (39,false) (1,true) (24,true) (11,true) (37,true) (21,true) } Edges: { (20,false)->(11,true) (32,false)->(13,true) (47,true)->(24,false) (5,false)->(37,true) (18,true)->(11,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (1,true)->(11,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (15,true)->(6,true) (10,true)->(20,false) (17,true)->(39,false) (46,true)->(22,true) (4,true)->(13,true) (32,false)->(6,true) (7,true)->(12,true) (28,false)->(21,true) (6,true)->(13,true) (39,false)->(24,true) (29,true)->(32,false) (1,true)->(16,false) (20,false)->(6,true) (9,true)->(12,true) (29,true)->(13,true) (18,true)->(46,true) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (41,false)->(22,true) (28,false)->(23,true) (19,false)->(39,false) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (21,true)->(24,true) (47,true)->(21,true) (11,true)->(46,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
Found resolution clause: x39 not(x21) not(x47) 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true), (18,false))
DEDUCING
Stack=(17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true))
DEDUCING
Stack=(17,true) (15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,true))
Trying: (18,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x20) 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:x6 not(x15) x20 ; Literal: x6 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x6) x13 x32 ; Literal: x13 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:not(x6) x13 not(x4) not(x29) ; Literal: x13 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x34) not(x42) not(x49) ; Literal: not(x49) 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Found unit clause:not(x14) not(x30) not(x48) ; Literal: not(x48) 
Bad clause:not(x14) x43 x48 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, 0, 0)
Running conflict analysis on implication graph: Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (12,true) (0,false) (17,true) (20,false) (7,true) (49,false) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (14,true) (4,true) (47,true) (27,true) (42,true) (16,false) (48,false) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (1,true)->(41,false) (10,true)->(20,false) (4,true)->(13,true) (7,true)->(12,true) (28,false)->(21,true) (6,true)->(13,true) (29,true)->(32,false) (20,false)->(6,true) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (28,false)->(23,true) (38,true)->(42,true) (29,true)->(6,true) (30,true)->(48,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (44,false)->(43,false) (21,true)->(39,true) (47,true)->(24,false) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (42,true)->(49,false) (1,true)->(11,true) (47,true)->(39,true) (14,true)->(48,false) (0,false)->(33,false) (12,true)->(11,true) (15,true)->(6,true) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (44,false)->(30,true) (42,true)->(44,false) (3,false)->(28,false) (41,false)->(16,false) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) }
No conflict
Running conflict analysis on implication graph: Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (12,true) (0,false) (17,true) (20,false) (7,true) (49,false) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (14,true) (4,true) (47,true) (27,true) (42,true) (16,false) (48,false) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (1,true)->(41,false) (10,true)->(20,false) (4,true)->(13,true) (7,true)->(12,true) (28,false)->(21,true) (6,true)->(13,true) (29,true)->(32,false) (20,false)->(6,true) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (28,false)->(23,true) (38,true)->(42,true) (29,true)->(6,true) (30,true)->(48,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (44,false)->(43,false) (21,true)->(39,true) (47,true)->(24,false) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (42,true)->(49,false) (1,true)->(11,true) (47,true)->(39,true) (14,true)->(48,false) (0,false)->(33,false) (12,true)->(11,true) (15,true)->(6,true) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (44,false)->(30,true) (42,true)->(44,false) (3,false)->(28,false) (41,false)->(16,false) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) }
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true), (17,false))
DEDUCING
Stack=(15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true))
DEDUCING
Stack=(15,true) (14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,true))
Trying: (17,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x20) 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:x6 not(x15) x20 ; Literal: x6 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x6) x13 x32 ; Literal: x13 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:not(x6) x13 not(x4) not(x29) ; Literal: x13 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x17 not(x21) not(x39) ; Literal: not(x39) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Bad clause:x17 not(x21) not(x39) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, -1, -1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, 0, 0, 0, -1, -1, -1, 1, -1, 1, -1, 0, -1, -1, -1, -1, -1, 1, -1, -1)
Running conflict analysis on implication graph: Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (32,false) (31,false) (12,true) (0,false) (20,false) (7,true) (3,false) (5,false) (10,true) (8,true) (29,true) (9,true) (4,true) (47,true) (16,false) (15,true) (41,false) (39,true) (13,true) (17,false) (39,false) (1,true) (11,true) (37,true) (21,true) } Edges: { (17,false)->(39,false) (32,false)->(13,true) (21,true)->(39,true) (47,true)->(24,false) (5,false)->(37,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (15,true)->(6,true) (10,true)->(20,false) (4,true)->(13,true) (32,false)->(6,true) (7,true)->(12,true) (28,false)->(21,true) (6,true)->(13,true) (29,true)->(32,false) (1,true)->(16,false) (20,false)->(6,true) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (21,true)->(39,false) (33,false)->(5,false) }
Found resolution clause: not(x21) not(x47) x17 
Added clause: not(x21) not(x47) x17 
Running conflict analysis on implication graph: Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (32,false) (31,false) (12,true) (0,false) (20,false) (7,true) (3,false) (5,false) (10,true) (8,true) (29,true) (9,true) (4,true) (47,true) (16,false) (15,true) (41,false) (39,true) (13,true) (17,false) (39,false) (1,true) (11,true) (37,true) (21,true) } Edges: { (17,false)->(39,false) (32,false)->(13,true) (21,true)->(39,true) (47,true)->(24,false) (5,false)->(37,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (15,true)->(6,true) (10,true)->(20,false) (4,true)->(13,true) (32,false)->(6,true) (7,true)->(12,true) (28,false)->(21,true) (6,true)->(13,true) (29,true)->(32,false) (1,true)->(16,false) (20,false)->(6,true) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (21,true)->(39,false) (33,false)->(5,false) }
Found resolution clause: not(x21) not(x47) x17 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true), (15,false))
DEDUCING
Stack=(14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true))
DEDUCING
Stack=(14,true) (10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,true))
Trying: (15,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x20) 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x15 x16 not(x25) ; Literal: not(x25) 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:x15 x25 not(x26) ; Literal: not(x26) 
Found unit clause:not(x5) x16 x25 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x21) not(x47) x17 ; Literal: x17 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:not(x19) not(x22) x26 ; Literal: not(x22) 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:x22 x41 not(x46) ; Literal: not(x46) 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x18) 
Found unit clause:not(x34) not(x42) not(x49) ; Literal: not(x49) 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Found unit clause:not(x14) not(x30) not(x48) ; Literal: not(x48) 
Bad clause:not(x14) x43 x48 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, 0, 1, 0, 0)
Running conflict analysis on implication graph: Nodes: { (26,false) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (25,false) (12,true) (0,false) (18,false) (17,true) (20,false) (7,true) (15,false) (49,false) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (14,true) (4,true) (47,true) (27,true) (42,true) (16,false) (48,false) (41,false) (39,true) (13,true) (22,false) (1,true) (44,false) (46,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (25,false)->(26,false) (22,false)->(46,false) (32,false)->(13,true) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (26,false)->(22,false) (5,false)->(47,true) (23,true)->(37,true) (1,true)->(41,false) (10,true)->(20,false) (47,true)->(17,true) (7,true)->(12,true) (28,false)->(21,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (28,false)->(23,true) (19,true)->(22,false) (38,true)->(42,true) (29,true)->(6,true) (30,true)->(48,false) (11,true)->(41,false) (8,true)->(20,false) (25,false)->(5,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (46,false)->(18,false) (15,false)->(26,false) (44,false)->(43,false) (41,false)->(46,false) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (15,false)->(25,false) (42,true)->(49,false) (1,true)->(11,true) (47,true)->(39,true) (14,true)->(48,false) (0,false)->(33,false) (12,true)->(11,true) (16,false)->(25,false) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (16,false)->(5,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (44,false)->(30,true) (42,true)->(44,false) (3,false)->(28,false) (41,false)->(16,false) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(18,false) }
No conflict
Running conflict analysis on implication graph: Nodes: { (26,false) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (25,false) (12,true) (0,false) (18,false) (17,true) (20,false) (7,true) (15,false) (49,false) (3,false) (5,false) (10,true) (8,true) (29,true) (19,true) (9,true) (14,true) (4,true) (47,true) (27,true) (42,true) (16,false) (48,false) (41,false) (39,true) (13,true) (22,false) (1,true) (44,false) (46,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (25,false)->(26,false) (22,false)->(46,false) (32,false)->(13,true) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (26,false)->(22,false) (5,false)->(47,true) (23,true)->(37,true) (1,true)->(41,false) (10,true)->(20,false) (47,true)->(17,true) (7,true)->(12,true) (28,false)->(21,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (28,false)->(23,true) (19,true)->(22,false) (38,true)->(42,true) (29,true)->(6,true) (30,true)->(48,false) (11,true)->(41,false) (8,true)->(20,false) (25,false)->(5,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (46,false)->(18,false) (15,false)->(26,false) (44,false)->(43,false) (41,false)->(46,false) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (15,false)->(25,false) (42,true)->(49,false) (1,true)->(11,true) (47,true)->(39,true) (14,true)->(48,false) (0,false)->(33,false) (12,true)->(11,true) (16,false)->(25,false) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (16,false)->(5,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (44,false)->(30,true) (42,true)->(44,false) (3,false)->(28,false) (41,false)->(16,false) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(18,false) }
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true), (14,false))
DEDUCING
Stack=(10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true))
DEDUCING
Stack=(10,true) (9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (20,false) (7,true) (3,false) (5,false) (10,true) (11,true) (8,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (5,false)->(37,true) (37,true)->(31,false) (1,true)->(11,true) (0,false)->(23,true) (23,true)->(37,true) (0,false)->(33,false) (12,true)->(11,true) (1,true)->(41,false) (10,true)->(20,false) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (3,false)->(28,false) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,true))
Trying: (14,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x20) 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x10) not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x21) not(x47) x17 ; Literal: x17 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x34) not(x42) not(x49) ; Literal: not(x49) 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Found unit clause:x14 not(x30) x35 ; Literal: x35 
Found unit clause:x14 x22 not(x35) ; Literal: x22 
Found unit clause:not(x22) not(x35) x45 ; Literal: x45 
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x15) 
Found unit clause:x15 x25 not(x26) ; Literal: x25 
Found unit clause:x15 x16 not(x25) ; Literal: not(x25) 
Bad clause:x15 x25 not(x26) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, -1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, -1, 1, 1, 1, -1, 0, 1, 0, 0, 1, -1, 1, -1, 0)
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (25,false) (12,true) (0,false) (17,true) (20,false) (7,true) (15,false) (49,false) (3,false) (5,false) (10,true) (14,false) (8,true) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (25,true) (35,true) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (1,true)->(41,false) (10,true)->(20,false) (35,true)->(45,true) (47,true)->(17,true) (7,true)->(12,true) (28,false)->(21,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (26,true)->(25,true) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (15,false)->(25,false) (42,true)->(49,false) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(33,false) (12,true)->(11,true) (16,false)->(25,false) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (44,false)->(30,true) (42,true)->(44,false) (15,false)->(25,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x15 x16 
Added clause: not(x26) x15 x16 
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (25,false) (12,true) (0,false) (17,true) (20,false) (7,true) (15,false) (49,false) (3,false) (5,false) (10,true) (14,false) (8,true) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (25,true) (35,true) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (1,true)->(41,false) (10,true)->(20,false) (35,true)->(45,true) (47,true)->(17,true) (7,true)->(12,true) (28,false)->(21,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (10,true)->(32,false) (26,true)->(25,true) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (11,true)->(41,false) (8,true)->(20,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (15,false)->(25,false) (42,true)->(49,false) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(33,false) (12,true)->(11,true) (16,false)->(25,false) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (44,false)->(30,true) (42,true)->(44,false) (15,false)->(25,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x15 x16 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true), (10,false))
DEDUCING
Stack=(9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (7,true) (3,false) (5,false) (11,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (1,true)->(11,true) (41,false)->(16,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (0,false)->(33,false) (13,true)->(28,false) (12,true)->(11,true) (1,true)->(41,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true))
DEDUCING
Stack=(9,true) (8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (16,false) (32,false) (31,false) (41,false) (13,true) (12,true) (0,false) (1,true) (7,true) (3,false) (5,false) (11,true) (29,true) (37,true) (9,true) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (1,true)->(11,true) (41,false)->(16,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (0,false)->(33,false) (13,true)->(28,false) (12,true)->(11,true) (1,true)->(41,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,true))
Trying: (10,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x4) not(x32) x10 ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:x10 x40 x48 ; Literal: x40 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x21) not(x47) x17 ; Literal: x17 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x34) not(x42) not(x49) ; Literal: not(x49) 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Found unit clause:not(x14) x43 x48 ; Literal: not(x14) 
Found unit clause:x14 not(x30) x35 ; Literal: x35 
Found unit clause:x14 x22 not(x35) ; Literal: x22 
Found unit clause:not(x22) not(x35) x45 ; Literal: x45 
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x15) 
Found unit clause:not(x26) x15 x16 ; Literal: x15 
Bad clause:not(x15) not(x26) not(x45) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, -1, 1, -1, 1, 1, 1, 0, -1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, -1, 1, 1, 1, 1, 0, 1, 0, 0, 1, -1, 1, 0, 0)
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (12,true) (0,false) (40,true) (17,true) (7,true) (10,false) (49,false) (3,false) (15,false) (5,false) (14,false) (8,true) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (48,false) (16,false) (42,true) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (35,true) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (8,true)->(48,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (1,true)->(41,false) (35,true)->(45,true) (47,true)->(17,true) (7,true)->(12,true) (10,false)->(32,false) (28,false)->(21,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (48,false)->(14,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (42,true)->(49,false) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(33,false) (12,true)->(11,true) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (48,false)->(40,true) (26,true)->(15,true) (9,true)->(12,true) (29,true)->(13,true) (44,false)->(30,true) (10,false)->(48,false) (42,true)->(44,false) (16,false)->(15,true) (10,false)->(40,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x16 not(x45) 
Added clause: not(x26) x16 not(x45) 
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (12,true) (0,false) (40,true) (17,true) (7,true) (10,false) (49,false) (3,false) (15,false) (5,false) (14,false) (8,true) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (48,false) (16,false) (42,true) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (35,true) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (8,true)->(48,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (1,true)->(41,false) (35,true)->(45,true) (47,true)->(17,true) (7,true)->(12,true) (10,false)->(32,false) (28,false)->(21,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (48,false)->(14,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (42,true)->(49,false) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(33,false) (12,true)->(11,true) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (48,false)->(40,true) (26,true)->(15,true) (9,true)->(12,true) (29,true)->(13,true) (44,false)->(30,true) (10,false)->(48,false) (42,true)->(44,false) (16,false)->(15,true) (10,false)->(40,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x16 not(x45) 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true), (9,false))
DEDUCING
Stack=(8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (3,false) (5,false) (32,false) (31,false) (13,true) (29,true) (37,true) (0,false) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (0,false)->(33,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true))
DEDUCING
Stack=(8,true) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (3,false) (5,false) (32,false) (31,false) (13,true) (29,true) (37,true) (0,false) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (0,false)->(33,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true))
Trying: (9,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x10) 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x10 x40 x48 ; Literal: x40 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x21) not(x47) x17 ; Literal: x17 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x34) not(x42) not(x49) ; Literal: not(x49) 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Found unit clause:not(x14) x43 x48 ; Literal: not(x14) 
Found unit clause:x14 not(x30) x35 ; Literal: x35 
Found unit clause:x14 x22 not(x35) ; Literal: x22 
Found unit clause:not(x22) not(x35) x45 ; Literal: x45 
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x15) 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:x15 x25 not(x26) ; Literal: x25 
Found unit clause:not(x4) not(x16) not(x25) ; Literal: not(x25) 
Found unit clause:not(x1) not(x16) x41 ; Literal: x41 
Bad clause:x15 x25 not(x26) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0)
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (25,false) (0,false) (40,true) (17,true) (16,true) (18,true) (10,false) (3,false) (49,false) (5,false) (15,false) (14,false) (8,true) (29,true) (19,true) (4,true) (9,false) (36,false) (47,true) (27,true) (48,false) (42,true) (39,true) (13,true) (12,false) (1,true) (44,false) (46,false) (2,true) (26,true) (43,false) (25,true) (20,true) (35,true) (11,false) (34,true) (41,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (11,false)->(20,true) (8,true)->(48,false) (49,false)->(30,true) (9,false)->(18,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (35,true)->(45,true) (46,false)->(18,true) (47,true)->(17,true) (28,false)->(21,true) (1,true)->(41,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (26,true)->(25,true) (16,true)->(41,true) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (45,true)->(16,true) (18,true)->(11,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (48,false)->(14,false) (14,false)->(35,true) (44,false)->(43,false) (18,true)->(20,true) (14,false)->(22,true) (21,true)->(39,true) (2,true)->(36,false) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (4,true)->(25,false) (5,false)->(37,true) (16,true)->(25,false) (39,true)->(27,true) (22,true)->(26,true) (42,true)->(49,false) (47,true)->(39,true) (11,false)->(12,false) (8,true)->(10,false) (9,false)->(36,false) (0,false)->(33,false) (26,true)->(16,true) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (48,false)->(40,true) (29,true)->(13,true) (44,false)->(30,true) (10,false)->(48,false) (42,true)->(44,false) (20,true)->(10,false) (46,false)->(11,false) (10,false)->(40,true) (1,true)->(12,false) (3,false)->(28,false) (19,true)->(26,true) (15,false)->(25,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (9,false)->(46,false) (22,true)->(45,true) (2,true)->(46,false) }
Found resolution clause: not(x26) x15 not(x4) not(x16) 
Added clause: not(x26) x15 not(x4) not(x16) 
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (25,false) (0,false) (40,true) (17,true) (16,true) (18,true) (10,false) (3,false) (49,false) (5,false) (15,false) (14,false) (8,true) (29,true) (19,true) (4,true) (9,false) (36,false) (47,true) (27,true) (48,false) (42,true) (39,true) (13,true) (12,false) (1,true) (44,false) (46,false) (2,true) (26,true) (43,false) (25,true) (20,true) (35,true) (11,false) (34,true) (41,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (11,false)->(20,true) (8,true)->(48,false) (49,false)->(30,true) (9,false)->(18,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (35,true)->(45,true) (46,false)->(18,true) (47,true)->(17,true) (28,false)->(21,true) (1,true)->(41,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (26,true)->(25,true) (16,true)->(41,true) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (45,true)->(16,true) (18,true)->(11,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (48,false)->(14,false) (14,false)->(35,true) (44,false)->(43,false) (18,true)->(20,true) (14,false)->(22,true) (21,true)->(39,true) (2,true)->(36,false) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (4,true)->(25,false) (5,false)->(37,true) (16,true)->(25,false) (39,true)->(27,true) (22,true)->(26,true) (42,true)->(49,false) (47,true)->(39,true) (11,false)->(12,false) (8,true)->(10,false) (9,false)->(36,false) (0,false)->(33,false) (26,true)->(16,true) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (48,false)->(40,true) (29,true)->(13,true) (44,false)->(30,true) (10,false)->(48,false) (42,true)->(44,false) (20,true)->(10,false) (46,false)->(11,false) (10,false)->(40,true) (1,true)->(12,false) (3,false)->(28,false) (19,true)->(26,true) (15,false)->(25,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (9,false)->(46,false) (22,true)->(45,true) (2,true)->(46,false) }
Found resolution clause: not(x26) x15 not(x4) not(x16) 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false))
DEDUCING
Stack=(7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (3,false) (5,false) (32,false) (31,false) (13,true) (29,true) (37,true) (0,false) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (0,false)->(33,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true))
DEDUCING
Stack=(7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (3,false) (5,false) (32,false) (31,false) (13,true) (29,true) (37,true) (0,false) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (0,false)->(33,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true))
Trying: (8,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x21) not(x47) x17 ; Literal: x17 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:x8 not(x19) not(x49) ; Literal: not(x49) 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, -1, 1, 0, 0, -1, -1, 1, -1, 0)
DEDUCING
Stack=(8,false) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (0,false) (17,true) (49,false) (3,false) (5,false) (8,false) (29,true) (19,true) (4,true) (47,true) (27,true) (42,true) (39,true) (13,true) (44,false) (43,false) (34,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (44,false)->(43,false) (21,true)->(39,true) (49,false)->(30,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (30,true)->(43,false) (5,false)->(37,true) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (39,true)->(27,true) (21,true)->(24,false) (17,true)->(27,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (19,true)->(49,false) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (47,true)->(17,true) (32,false)->(6,true) (28,false)->(21,true) (29,true)->(32,false) (29,true)->(13,true) (8,false)->(49,false) (4,true)->(32,false) (23,true)->(33,false) (44,false)->(30,true) (42,true)->(44,false) (28,false)->(23,true) (3,false)->(28,false) (38,true)->(42,true) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 0, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, -1, 1, 0, 0, -1, -1, 1, -1, 0)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false))
Trying: (9,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, -1, 1, 0, 0, -1, -1, 1, -1, 0)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, -1, 1, 1, 1, -1, -1, 0, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, -1, 0)
DEDUCING
Stack=(9,true) (8,false) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (12,true) (0,false) (17,true) (7,true) (49,false) (3,false) (5,false) (8,false) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (41,false) (39,true) (13,true) (1,true) (44,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (44,false)->(43,false) (21,true)->(39,true) (49,false)->(30,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (30,true)->(43,false) (5,false)->(37,true) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (39,true)->(27,true) (21,true)->(24,false) (17,true)->(27,true) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (1,true)->(41,false) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (47,true)->(17,true) (32,false)->(6,true) (28,false)->(21,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (8,false)->(49,false) (4,true)->(32,false) (23,true)->(33,false) (44,false)->(30,true) (42,true)->(44,false) (28,false)->(23,true) (3,false)->(28,false) (38,true)->(42,true) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, -1, 1, 1, 1, -1, -1, 0, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, -1, 0)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false), (9,true))
Trying: (10,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, -1, -1, 0, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, -1, 0)
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, -1, -1, 0, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, -1, 0)
DEDUCING
Stack=(10,true) (9,true) (8,false) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (12,true) (0,false) (17,true) (7,true) (49,false) (3,false) (5,false) (8,false) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (41,false) (39,true) (13,true) (1,true) (44,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (44,false)->(43,false) (21,true)->(39,true) (49,false)->(30,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (30,true)->(43,false) (5,false)->(37,true) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (39,true)->(27,true) (21,true)->(24,false) (17,true)->(27,true) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (1,true)->(41,false) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (47,true)->(17,true) (32,false)->(6,true) (28,false)->(21,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (8,false)->(49,false) (4,true)->(32,false) (23,true)->(33,false) (44,false)->(30,true) (42,true)->(44,false) (28,false)->(23,true) (3,false)->(28,false) (38,true)->(42,true) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, -1, -1, 0, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, -1, 0)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false), (9,true), (10,true))
Trying: (14,true)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, -1, 0, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, -1, 0)
Found unit clause:not(x14) x43 x48 ; Literal: x48 
Found unit clause:not(x14) not(x30) not(x48) ; Literal: not(x48) 
Bad clause:not(x14) x43 x48 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, -1, 0, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, 0, 0)
Running conflict analysis on implication graph: Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (12,true) (0,false) (17,true) (7,true) (49,false) (3,false) (5,false) (8,false) (29,true) (19,true) (9,true) (14,true) (4,true) (47,true) (27,true) (42,true) (16,false) (48,false) (41,false) (39,true) (13,true) (48,true) (1,true) (44,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (1,true)->(41,false) (47,true)->(17,true) (28,false)->(21,true) (7,true)->(12,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (38,true)->(42,true) (29,true)->(6,true) (30,true)->(48,false) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (44,false)->(43,false) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (14,true)->(48,true) (39,true)->(27,true) (1,true)->(11,true) (47,true)->(39,true) (14,true)->(48,false) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (43,false)->(48,true) (8,false)->(49,false) (44,false)->(30,true) (42,true)->(44,false) (3,false)->(28,false) (41,false)->(16,false) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) }
Found resolution clause: not(x14) x43 not(x30) 
Added clause: not(x14) x43 not(x30) 
DEDUCING
Stack=(10,true) (9,true) (8,false) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (12,true) (0,false) (17,true) (7,true) (49,false) (3,false) (5,false) (8,false) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (41,false) (39,true) (13,true) (1,true) (44,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (44,false)->(43,false) (21,true)->(39,true) (49,false)->(30,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (30,true)->(43,false) (5,false)->(37,true) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (39,true)->(27,true) (21,true)->(24,false) (17,true)->(27,true) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (1,true)->(41,false) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (47,true)->(17,true) (32,false)->(6,true) (28,false)->(21,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (8,false)->(49,false) (4,true)->(32,false) (23,true)->(33,false) (44,false)->(30,true) (42,true)->(44,false) (28,false)->(23,true) (3,false)->(28,false) (38,true)->(42,true) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, -1, -1, 0, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, -1, 0)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false), (9,true), (10,true))
Trying: (14,false)
Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, -1, 0, 1, -1, 1, -1, 1, -1, 1, 0, -1, -1, 1, 0, 1, 1, 0, 0, 0, 1, -1, -1, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, 1, -1, 0)
Found unit clause:x14 not(x30) x35 ; Literal: x35 
Found unit clause:x14 x22 not(x35) ; Literal: x22 
Found unit clause:not(x22) not(x35) x45 ; Literal: x45 
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x15) 
Found unit clause:not(x26) x15 x16 ; Literal: x15 
Bad clause:not(x26) x16 not(x45) 
Bad clause:not(x15) not(x26) not(x45) 
Bad clause:not(x26) x16 not(x45) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, -1, 1, -1, 1, 1, 1, 0, -1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, -1, 1, 1, 1, -1, 0, 1, 0, 0, 1, -1, 1, -1, 0)
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (12,true) (0,false) (17,true) (7,true) (15,false) (49,false) (3,false) (5,false) (14,false) (8,false) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (35,true) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (1,true)->(41,false) (35,true)->(45,true) (47,true)->(17,true) (28,false)->(21,true) (7,true)->(12,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (26,true)->(15,true) (9,true)->(12,true) (29,true)->(13,true) (8,false)->(49,false) (44,false)->(30,true) (42,true)->(44,false) (16,false)->(15,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x16 not(x45) 
Added clause: not(x26) x16 not(x45) 
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (12,true) (0,false) (17,true) (7,true) (15,false) (49,false) (3,false) (5,false) (14,false) (8,false) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (35,true) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (1,true)->(41,false) (35,true)->(45,true) (47,true)->(17,true) (28,false)->(21,true) (7,true)->(12,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (26,true)->(15,true) (9,true)->(12,true) (29,true)->(13,true) (8,false)->(49,false) (44,false)->(30,true) (42,true)->(44,false) (16,false)->(15,true) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x16 not(x45) 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false), (9,true), (10,false))
DEDUCING
Stack=(9,true) (8,false) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (12,true) (0,false) (17,true) (7,true) (49,false) (3,false) (5,false) (8,false) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (41,false) (39,true) (13,true) (1,true) (44,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (44,false)->(43,false) (21,true)->(39,true) (49,false)->(30,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (30,true)->(43,false) (5,false)->(37,true) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (39,true)->(27,true) (21,true)->(24,false) (17,true)->(27,true) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (1,true)->(41,false) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (47,true)->(17,true) (32,false)->(6,true) (28,false)->(21,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (8,false)->(49,false) (4,true)->(32,false) (23,true)->(33,false) (44,false)->(30,true) (42,true)->(44,false) (28,false)->(23,true) (3,false)->(28,false) (38,true)->(42,true) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false), (9,true))
DEDUCING
Stack=(9,true) (8,false) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (12,true) (0,false) (17,true) (7,true) (49,false) (3,false) (5,false) (8,false) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (41,false) (39,true) (13,true) (1,true) (44,false) (43,false) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (44,false)->(43,false) (21,true)->(39,true) (49,false)->(30,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (30,true)->(43,false) (5,false)->(37,true) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (39,true)->(27,true) (21,true)->(24,false) (17,true)->(27,true) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (1,true)->(41,false) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (47,true)->(17,true) (32,false)->(6,true) (28,false)->(21,true) (7,true)->(12,true) (29,true)->(32,false) (1,true)->(16,false) (9,true)->(12,true) (29,true)->(13,true) (8,false)->(49,false) (4,true)->(32,false) (23,true)->(33,false) (44,false)->(30,true) (42,true)->(44,false) (28,false)->(23,true) (3,false)->(28,false) (38,true)->(42,true) (41,false)->(16,false) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false), (9,true))
Trying: (10,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x7) not(x9) x12 ; Literal: x12 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x4) not(x32) x10 ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:not(x1) x11 not(x12) ; Literal: x11 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x41) 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:not(x1) not(x16) x41 ; Literal: not(x16) 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x21) not(x47) x17 ; Literal: x17 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:x8 not(x19) not(x49) ; Literal: not(x49) 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Found unit clause:not(x14) x43 not(x30) ; Literal: not(x14) 
Found unit clause:x14 not(x30) x35 ; Literal: x35 
Found unit clause:x14 x22 not(x35) ; Literal: x22 
Found unit clause:not(x22) not(x35) x45 ; Literal: x45 
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x15) 
Found unit clause:not(x26) x15 x16 ; Literal: x15 
Bad clause:not(x26) x16 not(x45) 
Bad clause:not(x26) x16 not(x45) 
Bad clause:not(x15) not(x26) not(x45) 
Bad clause:not(x26) x16 not(x45) 
Bad clause:not(x26) x16 not(x45) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, -1, 1, -1, 1, 1, 1, 0, -1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, -1, 1, 1, 1, -1, 0, 1, 0, 0, 1, -1, 1, -1, 0)
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (12,true) (0,false) (17,true) (7,true) (10,false) (49,false) (3,false) (15,false) (5,false) (14,false) (8,false) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (35,true) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (1,true)->(41,false) (35,true)->(45,true) (47,true)->(17,true) (28,false)->(21,true) (7,true)->(12,true) (10,false)->(32,false) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (26,true)->(15,true) (9,true)->(12,true) (29,true)->(13,true) (8,false)->(49,false) (44,false)->(30,true) (42,true)->(44,false) (16,false)->(15,true) (30,true)->(14,false) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x16 not(x45) 
Added clause: not(x26) x16 not(x45) 
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (12,true) (0,false) (17,true) (7,true) (10,false) (49,false) (3,false) (15,false) (5,false) (14,false) (8,false) (29,true) (19,true) (9,true) (4,true) (47,true) (27,true) (42,true) (16,false) (15,true) (41,false) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (35,true) (34,true) (11,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (1,true)->(41,false) (35,true)->(45,true) (47,true)->(17,true) (28,false)->(21,true) (7,true)->(12,true) (10,false)->(32,false) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (11,true)->(41,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (5,false)->(37,true) (39,true)->(27,true) (22,true)->(26,true) (1,true)->(11,true) (47,true)->(39,true) (0,false)->(33,false) (19,true)->(49,false) (12,true)->(11,true) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (1,true)->(16,false) (26,true)->(15,true) (9,true)->(12,true) (29,true)->(13,true) (8,false)->(49,false) (44,false)->(30,true) (42,true)->(44,false) (16,false)->(15,true) (30,true)->(14,false) (3,false)->(28,false) (41,false)->(16,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x16 not(x45) 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false), (9,false))
DEDUCING
Stack=(8,false) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (0,false) (17,true) (49,false) (3,false) (5,false) (8,false) (29,true) (19,true) (4,true) (47,true) (27,true) (42,true) (39,true) (13,true) (44,false) (43,false) (34,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (44,false)->(43,false) (21,true)->(39,true) (49,false)->(30,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (30,true)->(43,false) (5,false)->(37,true) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (39,true)->(27,true) (21,true)->(24,false) (17,true)->(27,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (19,true)->(49,false) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (47,true)->(17,true) (32,false)->(6,true) (28,false)->(21,true) (29,true)->(32,false) (29,true)->(13,true) (8,false)->(49,false) (4,true)->(32,false) (23,true)->(33,false) (44,false)->(30,true) (42,true)->(44,false) (28,false)->(23,true) (3,false)->(28,false) (38,true)->(42,true) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false))
DEDUCING
Stack=(8,false) (7,true) (4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (0,false) (17,true) (49,false) (3,false) (5,false) (8,false) (29,true) (19,true) (4,true) (47,true) (27,true) (42,true) (39,true) (13,true) (44,false) (43,false) (34,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (49,false)->(44,false) (44,false)->(43,false) (21,true)->(39,true) (49,false)->(30,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (30,true)->(43,false) (5,false)->(37,true) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (39,true)->(27,true) (21,true)->(24,false) (17,true)->(27,true) (47,true)->(39,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (0,false)->(33,false) (19,true)->(49,false) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (47,true)->(17,true) (32,false)->(6,true) (28,false)->(21,true) (29,true)->(32,false) (29,true)->(13,true) (8,false)->(49,false) (4,true)->(32,false) (23,true)->(33,false) (44,false)->(30,true) (42,true)->(44,false) (28,false)->(23,true) (3,false)->(28,false) (38,true)->(42,true) (29,true)->(6,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,false))
Trying: (9,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Found unit clause:x8 not(x18) not(x20) ; Literal: not(x20) 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Bad clause:x11 not(x18) x20 
Found unit clause:x0 x23 x28 ; Literal: x23 
Bad clause:x11 not(x18) x20 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Bad clause:x11 not(x18) x20 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Bad clause:x11 not(x18) x20 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Bad clause:x11 not(x18) x20 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x21) not(x47) x17 ; Literal: x17 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Bad clause:x11 not(x18) x20 
Found unit clause:x8 not(x19) not(x49) ; Literal: not(x49) 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Bad clause:x11 not(x18) x20 
Found unit clause:x30 x44 x49 ; Literal: x30 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Bad clause:x11 not(x18) x20 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x14) x43 not(x30) ; Literal: not(x14) 
Found unit clause:x14 not(x30) x35 ; Literal: x35 
Bad clause:x11 not(x18) x20 
Found unit clause:x14 x22 not(x35) ; Literal: x22 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x22) not(x35) x45 ; Literal: x45 
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x15) 
Bad clause:x11 not(x18) x20 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:x15 x25 not(x26) ; Literal: x25 
Found unit clause:not(x4) not(x16) not(x25) ; Literal: not(x25) 
Found unit clause:not(x1) not(x16) x41 ; Literal: x41 
Bad clause:x11 not(x18) x20 
Bad clause:not(x26) x15 not(x4) not(x16) 
Bad clause:x15 x25 not(x26) 
Bad clause:x11 not(x18) x20 
Bad clause:not(x26) x15 not(x4) not(x16) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 1, 1, 0, 0, 1, 0, 1, -1, 0)
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (25,false) (0,false) (17,true) (20,false) (16,true) (18,true) (49,false) (3,false) (15,false) (5,false) (14,false) (8,false) (29,true) (19,true) (4,true) (9,false) (47,true) (27,true) (36,false) (42,true) (39,true) (13,true) (12,false) (1,true) (44,false) (46,false) (2,true) (26,true) (43,false) (25,true) (35,true) (11,false) (34,true) (41,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (8,false)->(20,false) (49,false)->(44,false) (49,false)->(30,true) (9,false)->(18,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (35,true)->(45,true) (46,false)->(18,true) (47,true)->(17,true) (28,false)->(21,true) (1,true)->(41,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (26,true)->(25,true) (16,true)->(41,true) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (45,true)->(16,true) (18,true)->(11,false) (18,true)->(20,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (2,true)->(36,false) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (4,true)->(25,false) (5,false)->(37,true) (16,true)->(25,false) (39,true)->(27,true) (22,true)->(26,true) (47,true)->(39,true) (11,false)->(12,false) (9,false)->(36,false) (0,false)->(33,false) (19,true)->(49,false) (26,true)->(16,true) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (29,true)->(13,true) (8,false)->(49,false) (44,false)->(30,true) (42,true)->(44,false) (46,false)->(11,false) (30,true)->(14,false) (1,true)->(12,false) (3,false)->(28,false) (19,true)->(26,true) (15,false)->(25,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (9,false)->(46,false) (22,true)->(45,true) (2,true)->(46,false) }
Found resolution clause: not(x26) x15 not(x4) not(x16) 
Added clause: not(x26) x15 not(x4) not(x16) 
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (25,false) (0,false) (17,true) (20,false) (16,true) (18,true) (49,false) (3,false) (15,false) (5,false) (14,false) (8,false) (29,true) (19,true) (4,true) (9,false) (47,true) (27,true) (36,false) (42,true) (39,true) (13,true) (12,false) (1,true) (44,false) (46,false) (2,true) (26,true) (43,false) (25,true) (35,true) (11,false) (34,true) (41,true) (37,true) (21,true) } Edges: { (32,false)->(13,true) (26,true)->(15,false) (8,false)->(20,false) (49,false)->(44,false) (49,false)->(30,true) (9,false)->(18,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (35,true)->(45,true) (46,false)->(18,true) (47,true)->(17,true) (28,false)->(21,true) (1,true)->(41,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (26,true)->(25,true) (16,true)->(41,true) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (45,true)->(16,true) (18,true)->(11,false) (18,true)->(20,false) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (2,true)->(36,false) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (4,true)->(25,false) (5,false)->(37,true) (16,true)->(25,false) (39,true)->(27,true) (22,true)->(26,true) (47,true)->(39,true) (11,false)->(12,false) (9,false)->(36,false) (0,false)->(33,false) (19,true)->(49,false) (26,true)->(16,true) (17,true)->(38,true) (39,true)->(19,true) (38,true)->(34,true) (32,false)->(6,true) (29,true)->(13,true) (8,false)->(49,false) (44,false)->(30,true) (42,true)->(44,false) (46,false)->(11,false) (30,true)->(14,false) (1,true)->(12,false) (3,false)->(28,false) (19,true)->(26,true) (15,false)->(25,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (9,false)->(46,false) (22,true)->(45,true) (2,true)->(46,false) }
Found resolution clause: not(x26) x15 not(x4) not(x16) 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,true), (8,true))
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,true), (7,false))
DEDUCING
Stack=(4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (3,false) (5,false) (32,false) (31,false) (13,true) (29,true) (37,true) (0,false) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (0,false)->(33,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true))
DEDUCING
Stack=(4,true) (3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { (4,true) (33,false) (6,true) (23,true) (28,false) (3,false) (5,false) (32,false) (31,false) (13,true) (29,true) (37,true) (0,false) } Edges: { (32,false)->(13,true) (32,false)->(6,true) (29,true)->(32,false) (29,true)->(13,true) (4,true)->(32,false) (23,true)->(33,false) (5,false)->(37,true) (37,true)->(31,false) (28,false)->(23,true) (3,false)->(28,false) (29,true)->(6,true) (0,false)->(23,true) (5,false)->(31,false) (23,true)->(37,true) (4,true)->(29,true) (23,true)->(5,false) (0,false)->(33,false) (13,true)->(28,false) (33,false)->(5,false) }
VarVals=List(0, 1, 1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false), (4,true))
Trying: (7,false)
Propogating:List(0, 1, 1, 0, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:not(x4) x29 ; Literal: x29 
Found unit clause:not(x29) not(x4) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x21) not(x47) x17 ; Literal: x17 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x34) not(x42) not(x49) ; Literal: not(x49) 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Found unit clause:not(x14) x43 not(x30) ; Literal: not(x14) 
Found unit clause:x14 not(x30) x35 ; Literal: x35 
Found unit clause:x14 x22 not(x35) ; Literal: x22 
Found unit clause:not(x22) not(x35) x45 ; Literal: x45 
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x15) 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:x15 x25 not(x26) ; Literal: x25 
Found unit clause:not(x4) not(x16) not(x25) ; Literal: not(x25) 
Found unit clause:not(x1) not(x16) x41 ; Literal: x41 
Bad clause:not(x26) x15 not(x4) not(x16) 
Bad clause:not(x26) x15 not(x4) not(x16) 
Bad clause:x15 x25 not(x26) 
Found unit clause:not(x1) not(x11) not(x41) ; Literal: not(x11) 
Found unit clause:x7 x12 not(x41) ; Literal: x12 
Bad clause:not(x26) x15 not(x4) not(x16) 
Bad clause:not(x26) x15 not(x4) not(x16) 
Bad clause:x15 x25 not(x26) 
Bad clause:not(x1) x11 not(x12) 
Bad clause:not(x26) x15 not(x4) not(x16) 
Bad clause:not(x26) x15 not(x4) not(x16) 
Done Propogating:List(0, 1, 1, 0, 1, 0, 1, 0, -1, -1, -1, 0, 1, 1, 0, 0, 1, 1, -1, 1, -1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, -1, 1, 1, 1, -1, 1, 1, 0, 0, 1, -1, 1, -1, 0)
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (25,false) (12,true) (0,false) (17,true) (16,true) (15,false) (49,false) (3,false) (5,false) (14,false) (29,true) (19,true) (4,true) (47,true) (27,true) (42,true) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (25,true) (35,true) (11,false) (34,true) (41,true) (37,true) (21,true) (7,false) } Edges: { (1,true)->(11,false) (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (35,true)->(45,true) (47,true)->(17,true) (28,false)->(21,true) (1,true)->(41,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (26,true)->(25,true) (16,true)->(41,true) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (45,true)->(16,true) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (4,true)->(25,false) (5,false)->(37,true) (16,true)->(25,false) (39,true)->(27,true) (22,true)->(26,true) (42,true)->(49,false) (47,true)->(39,true) (0,false)->(33,false) (7,false)->(12,true) (41,true)->(11,false) (26,true)->(16,true) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (41,true)->(12,true) (38,true)->(34,true) (32,false)->(6,true) (29,true)->(13,true) (44,false)->(30,true) (42,true)->(44,false) (15,false)->(25,true) (30,true)->(14,false) (3,false)->(28,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x15 not(x4) not(x16) 
Added clause: not(x26) x15 not(x4) not(x16) 
Running conflict analysis on implication graph: Nodes: { (45,true) (33,false) (6,true) (23,true) (28,false) (24,false) (30,true) (32,false) (31,false) (38,true) (22,true) (25,false) (12,true) (0,false) (17,true) (16,true) (15,false) (49,false) (3,false) (5,false) (14,false) (29,true) (19,true) (4,true) (47,true) (27,true) (42,true) (39,true) (13,true) (1,true) (44,false) (26,true) (43,false) (25,true) (35,true) (11,false) (34,true) (41,true) (37,true) (21,true) (7,false) } Edges: { (1,true)->(11,false) (32,false)->(13,true) (26,true)->(15,false) (49,false)->(44,false) (49,false)->(30,true) (30,true)->(43,false) (27,true)->(34,true) (34,true)->(42,true) (37,true)->(31,false) (37,true)->(47,true) (21,true)->(24,false) (17,true)->(27,true) (0,false)->(23,true) (5,false)->(47,true) (23,true)->(37,true) (35,true)->(22,true) (43,false)->(14,false) (35,true)->(45,true) (47,true)->(17,true) (28,false)->(21,true) (1,true)->(41,true) (29,true)->(32,false) (4,true)->(32,false) (23,true)->(33,false) (26,true)->(25,true) (16,true)->(41,true) (28,false)->(23,true) (30,true)->(35,true) (38,true)->(42,true) (45,true)->(15,false) (29,true)->(6,true) (45,true)->(16,true) (13,true)->(28,false) (27,true)->(38,true) (33,false)->(5,false) (14,false)->(35,true) (44,false)->(43,false) (14,false)->(22,true) (21,true)->(39,true) (47,true)->(24,false) (21,true)->(17,true) (17,true)->(19,true) (4,true)->(25,false) (5,false)->(37,true) (16,true)->(25,false) (39,true)->(27,true) (22,true)->(26,true) (42,true)->(49,false) (47,true)->(39,true) (0,false)->(33,false) (7,false)->(12,true) (41,true)->(11,false) (26,true)->(16,true) (17,true)->(38,true) (34,true)->(49,false) (39,true)->(19,true) (41,true)->(12,true) (38,true)->(34,true) (32,false)->(6,true) (29,true)->(13,true) (44,false)->(30,true) (42,true)->(44,false) (15,false)->(25,true) (30,true)->(14,false) (3,false)->(28,false) (19,true)->(26,true) (5,false)->(31,false) (47,true)->(21,true) (4,true)->(29,true) (23,true)->(5,false) (22,true)->(45,true) }
Found resolution clause: not(x26) x15 not(x4) not(x16) 
Backjumping
PRUNING List((0,false), (1,true), (2,true), (3,false), (4,false))
DEDUCING
Stack=(3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false))
DEDUCING
Stack=(3,false) (2,true) (1,true) (0,false) 
Impl=Nodes: { } Edges: { }
VarVals=List(0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Assignments=List((0,false), (1,true), (2,true), (3,false))
Trying: (4,false)
Propogating:List(0, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
Found unit clause:x4 x40 ; Literal: x40 
Found unit clause:x4 not(x9) not(x40) ; Literal: not(x9) 
Found unit clause:x9 x29 not(x40) ; Literal: x29 
Found unit clause:not(x2) x9 not(x36) ; Literal: not(x36) 
Found unit clause:not(x2) x9 not(x46) ; Literal: not(x46) 
Found unit clause:x9 x18 x46 ; Literal: x18 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:not(x29) not(x32) ; Literal: not(x32) 
Found unit clause:x6 not(x29) x32 ; Literal: x6 
Found unit clause:not(x11) not(x18) x46 ; Literal: not(x11) 
Found unit clause:x32 not(x29) x13 ; Literal: x13 
Found unit clause:x3 not(x13) not(x28) ; Literal: not(x28) 
Found unit clause:not(x1) x11 not(x12) ; Literal: not(x12) 
Found unit clause:x11 not(x18) x20 ; Literal: x20 
Found unit clause:x0 x23 x28 ; Literal: x23 
Found unit clause:x8 not(x18) not(x20) ; Literal: x8 
Found unit clause:x0 not(x23) not(x33) ; Literal: not(x33) 
Found unit clause:not(x8) not(x10) not(x20) ; Literal: not(x10) 
Found unit clause:not(x5) not(x23) x33 ; Literal: not(x5) 
Found unit clause:not(x8) x10 not(x48) ; Literal: not(x48) 
Found unit clause:x5 not(x23) x37 ; Literal: x37 
Found unit clause:x5 not(x31) not(x37) ; Literal: not(x31) 
Found unit clause:not(x37) x47 x5 ; Literal: x47 
Found unit clause:x21 x28 not(x47) ; Literal: x21 
Found unit clause:not(x21) not(x24) not(x47) ; Literal: not(x24) 
Found unit clause:x39 not(x21) not(x47) ; Literal: x39 
Found unit clause:not(x21) not(x47) x17 ; Literal: x17 
Found unit clause:not(x17) x19 not(x39) ; Literal: x19 
Found unit clause:not(x17) x27 not(x39) ; Literal: x27 
Found unit clause:not(x17) not(x27) x38 ; Literal: x38 
Found unit clause:not(x27) x34 not(x38) ; Literal: x34 
Found unit clause:not(x34) not(x38) x42 ; Literal: x42 
Found unit clause:not(x34) not(x42) not(x49) ; Literal: not(x49) 
Found unit clause:not(x42) not(x44) x49 ; Literal: not(x44) 
Found unit clause:x30 x44 x49 ; Literal: x30 
Found unit clause:not(x30) not(x43) x44 ; Literal: not(x43) 
Found unit clause:not(x14) x43 x48 ; Literal: not(x14) 
Found unit clause:not(x14) x43 not(x30) ; Literal: not(x14) 
Found unit clause:x14 not(x30) x35 ; Literal: x35 
Found unit clause:x14 x22 not(x35) ; Literal: x22 
Found unit clause:not(x22) not(x35) x45 ; Literal: x45 
Found unit clause:not(x19) not(x22) x26 ; Literal: x26 
Found unit clause:not(x15) not(x26) not(x45) ; Literal: not(x15) 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:not(x26) x16 not(x45) ; Literal: x16 
Found unit clause:x15 x25 not(x26) ; Literal: x25 
Found unit clause:not(x1) not(x16) x41 ; Literal: x41 
Found unit clause:x7 x12 not(x41) ; Literal: x7 
Done Propogating:List(0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0)
0 1 1 0 0 0 1 1 1 0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1 0 1 0 0 
SATISFIABLE
